#Read in metadata
metadata<-read.csv("metadata.csv")
metadata$rep <- gsub(".*-([0-9])$","\\1",metadata$SampleID)
EUK.data<- read.csv("rawData/EUK.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.parsed.csv",row.names = 1)
colnames(EUK.data)
EUK.all <- cbind(EUK.data,EUK.tax[match(rownames(EUK.data),EUK.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data))
unique(sampleIndex)
EUK.nReps <- data.frame(matrix(0,nrow = length(EUK.data[,1]),ncol=length(unique(sampleIndex))))
colnames(EUK.nReps) <- unique(sampleIndex)
rownames(EUK.nReps) <- rownames(EUK.data)
EUK.binary <-EUK.data
EUK.binary[EUK.binary<11] <- 0
EUK.binary[EUK.binary>10] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.binary))
for (column in 1:length(EUK.nReps[1,])){
EUK.nReps[,column] <- rowSums(EUK.binary[,binaryIndex %in% colnames(EUK.nReps)[column]])
}
EUK.all.nReps <- cbind(EUK.nReps,EUK.tax[match(rownames(EUK.binary),EUK.tax$OTU),])
write.csv(EUK.all,"rawdata/EUK.raw.wTAX.csv")
write.csv(EUK.all.nReps,"rawdata/EUK.raw.nReps.wTAX.csv")
RIZ.data<- read.csv("rawData/RIZ.raw.names.csv",row.names = 1)
RIZ.tax <- read.csv("taxonomy/RIZ.parsed.csv",row.names = 1)
colnames(RIZ.data)
RIZ.all <- cbind(RIZ.data,RIZ.tax[match(rownames(RIZ.data),RIZ.tax$OTU),])
View(RIZ.all)
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.data))
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
RIZ.binary[RIZ.binary<11] <- 0
RIZ.binary[RIZ.binary>10] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
for (column in 1:length(RIZ.nReps[1,])){
RIZ.nReps[,column] <- rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
}
RIZ.all.nReps <- cbind(RIZ.nReps,RIZ.tax[match(rownames(RIZ.binary),RIZ.tax$OTU),])
write.csv(RIZ.all,"rawdata/RIZ.raw.wTAX.csv")
write.csv(RIZ.all.nReps,"rawdata/RIZ.raw.nReps.wTAX.csv")
RIZ.all <- cbind(RIZ.data,RIZ.tax[match(rownames(RIZ.data),RIZ.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.data))
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
RIZ.binary <-RIZ.data
RIZ.binary[RIZ.binary<1] <- 0
RIZ.binary[RIZ.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
EUK.data<- read.csv("rawData/EUK.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.parsed.csv",row.names = 1)
colnames(EUK.data)
EUK.all <- cbind(EUK.data,EUK.tax[match(rownames(EUK.data),EUK.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data))
unique(sampleIndex)
EUK.nReps <- data.frame(matrix(0,nrow = length(EUK.data[,1]),ncol=length(unique(sampleIndex))))
colnames(EUK.nReps) <- unique(sampleIndex)
rownames(EUK.nReps) <- rownames(EUK.data)
EUK.binary <-EUK.data
EUK.binary[EUK.binary<1] <- 0
EUK.binary[EUK.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.binary))
for (column in 1:length(EUK.nReps[1,])){
EUK.nReps[,column] <- rowSums(EUK.binary[,binaryIndex %in% colnames(EUK.nReps)[column]])
}
EUK.all.nReps <- cbind(EUK.nReps,EUK.tax[match(rownames(EUK.binary),EUK.tax$OTU),])
write.csv(EUK.all,"rawdata/EUK.raw.wTAX.csv")
write.csv(EUK.all.nReps,"rawdata/EUK.raw.nReps.wTAX.csv")
RIZ.data<- read.csv("rawData/RIZ.raw.names.csv",row.names = 1)
RIZ.tax <- read.csv("taxonomy/RIZ.parsed.csv",row.names = 1)
colnames(RIZ.data)
RIZ.all <- cbind(RIZ.data,RIZ.tax[match(rownames(RIZ.data),RIZ.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.data))
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
RIZ.binary[RIZ.binary<1] <- 0
RIZ.binary[RIZ.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
for (column in 1:length(RIZ.nReps[1,])){
RIZ.nReps[,column] <- rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
}
RIZ.all.nReps <- cbind(RIZ.nReps,RIZ.tax[match(rownames(RIZ.binary),RIZ.tax$OTU),])
write.csv(RIZ.all,"rawdata/RIZ.raw.wTAX.csv")
write.csv(RIZ.all.nReps,"rawdata/RIZ.raw.nReps.wTAX.csv")
View(RIZ.binary)
for (column in 1:length(RIZ.nReps[1,])){
RIZ.nReps[,column] <- rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
}
RIZ.data<- read.csv("rawData/RIZ.raw.names.csv",row.names = 1)
RIZ.tax <- read.csv("taxonomy/RIZ.parsed.csv",row.names = 1)
colnames(RIZ.data)
RIZ.all <- cbind(RIZ.data,RIZ.tax[match(rownames(RIZ.data),RIZ.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.data))
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
RIZ.binary[RIZ.binary<1] <- 0
RIZ.binary[RIZ.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
View(RIZ.binary)
for (column in 1:length(RIZ.nReps[1,])){
#RIZ.nReps[,column] <- rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
print(rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]]))
}
column <- 1
RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]]
rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
RIZ.data<- read.csv("rawData/RIZ.raw.names.csv",row.names = 1)
RIZ.tax <- read.csv("taxonomy/RIZ.parsed.csv",row.names = 1)
colnames(RIZ.data)
RIZ.all <- cbind(RIZ.data,RIZ.tax[match(rownames(RIZ.data),RIZ.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.data))
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
table(RIZ.binary<1)
table(RIZ.binary>0)
RIZ.binary[RIZ.binary<1] <- 0
RIZ.binary[RIZ.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
binaryIndex
binaryIndex %in% colnames(RIZ.nReps)
binaryIndex %in% colnames(RIZ.nReps)[2]
binaryIndex %in% colnames(RIZ.nReps)[3]
colnames(RIZ.nReps)[2]
colnames(RIZ.nReps)[3]
binaryIndex
colnames(RIZ.nReps)[1]
dim(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
column <- 2
dim(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
column <- 1
dim(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
colnames(RIZ.nReps)[1]
binaryIndex %in% "RIZ.BLANK"
binaryIndex %in% colnames(RIZ.nReps)[column]
RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]]
dim(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
str(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
is.vector(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])
is.vector(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[2]])
unique(sampleIndex)
RIZ.nReps <- data.frame(matrix(0,nrow = length(RIZ.data[,1]),ncol=length(unique(sampleIndex))))
colnames(RIZ.nReps) <- unique(sampleIndex)
rownames(RIZ.nReps) <- rownames(RIZ.data)
RIZ.binary <-RIZ.data
RIZ.binary[RIZ.binary<1] <- 0
RIZ.binary[RIZ.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(RIZ.binary))
for (column in 1:length(RIZ.nReps[1,])){
if (is.vector(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])){
RIZ.nReps[,column]  <- RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]]}else{
RIZ.nReps[,column] <- rowSums(RIZ.binary[,binaryIndex %in% colnames(RIZ.nReps)[column]])}
}
RIZ.all.nReps <- cbind(RIZ.nReps,RIZ.tax[match(rownames(RIZ.binary),RIZ.tax$OTU),])
write.csv(RIZ.all,"rawdata/RIZ.raw.wTAX.csv")
write.csv(RIZ.all.nReps,"rawdata/RIZ.raw.nReps.wTAX.csv")
list.files("rawdata",pattern="....raw.csv")
getwd()
list.files("rawData/",pattern="....raw.csv")
for (dataset in list.files("rawdata",pattern="....raw.names.csv")){
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
#Filter 3 -Maximum value in neg = 0 value in samples
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
#Reattach taxonomy and ASVs
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
dir.create("cleanedData")
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".dada2.csv"))
}
list.files("rawdata",pattern="....raw.names.csv")
dataset <- "EUK.raw.names.csv"
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
View(ctlSamples)
View(expSamples)
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
View(controlsCONTAM)
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
View(CleanedOutput)
dir.create("cleanedData")
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".dada2.csv"))
for (dataset in list.files("rawdata",pattern="....raw.names.csv")){
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
#Filter 3 -Maximum value in neg = 0 value in samples
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
#Reattach taxonomy and ASVs
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
dir.create("cleanedData")
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".dada2.csv"))
}
dir.create("cleanedData",showWarnings = F)
list.files("rawdata",pattern="....raw.names.csv")
dataset <- list.files("rawdata",pattern="....raw.names.csv")[1]
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
View(expSamples)
sort(metadata$SampleID[metadata$SampleType=="Experimental"]))
sort(metadata$SampleID[metadata$SampleType=="Experimental"])
# we cut the metadata here becuase it is strangely formatted
metadata <- metadata[0:120,]
for (dataset in list.files("rawdata",pattern="....raw.names.csv")){
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
filtersam <- expSamples
filtersam[filtersam>0 ] <- 1
filtersam <-filtersam[rowSums(filtersam) > 1,]
expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
#Filter 3 -Maximum value in neg = 0 value in samples
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
#Reattach taxonomy and ASVs
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
dir.create("cleanedData",showWarnings = F)
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".dada2.csv"))
}
dataset
View(expSamples)
# we cut the metadata here becuase it is strangely formatted
metadata <- metadata[0:120,]
for (dataset in list.files("rawdata",pattern="....raw.names.csv")){
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
#####NOTE - we are not running this filter as we want to be V sensitive!
#Filter 2 - within samples OTU must appear in more than one sample (this works because there are lots of reps per site and sample)
#filtersam <- expSamples
#filtersam[filtersam>0 ] <- 1
#filtersam <-filtersam[rowSums(filtersam) > 1,]
#expSamples <- expSamples[rownames(expSamples) %in% rownames(filtersam),]
#Filter 3 -Maximum value in neg = 0 value in samples
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
#Reattach taxonomy and ASVs
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
dir.create("cleanedData",showWarnings = F)
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".dada2.csv"))
}
####====3.0 ====####
####====3.0 ====####
####====3.0 ====####
####====3.0 ====####
gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.binary))
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
#check the vector is a vector
#check the dataframe contains the vector
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
for (column in 1:length(newDataFrame[1,])){
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
}
gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.binary))
colnames(EUK.data)
gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data))
test <- NrepsMaker(EUK.data,gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data)))
INdataframe <- EUK.data
vector <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data))
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
View(newDataFrame)
EUK.data
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
View(newDataFrame)
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
View(INdataframe)
vector
colnames(newDataFrame)
vector %in% colnames(newDataFrame)
column <- 1
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
#check the vector is a vector
#check the dataframe contains the vector
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
for (column in 1:length(newDataFrame[1,])){
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(INdataframe)
}
test <- NrepsMaker(EUK.data,gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data)))
View(test)
return(newDataFrame)
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
#check the vector is a vector
#check the dataframe contains the vector
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
for (column in 1:length(newDataFrame[1,])){
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(newDataFrame)
}
View(test)
##write these checks
#check the dataframe is a dataframe
is.data.frame(INdataframe)
#check the vector is a vector
if(!is.vector(vector)){stop("Input vector doesn't look like a vector")}
##write these checks
#check the dataframe is a dataframe
if(!is.data.frame(INdataframe)){stop("Input dataframe doesn't look like a dataframe")}
colnames(INdataframe)
#check the dataframe contains the vector
vector %In% colnames(INdataframe)
#check the dataframe contains the vector
vector %in% colnames(INdataframe)
vector
colnames(INdataframe)
vector
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
if(!is.data.frame(INdataframe)){stop("Input dataframe doesn't look like a dataframe")}
#check the vector is a vector
if(!is.vector(vector)){stop("Input vector doesn't look like a vector")}
#check the dataframe contains the vector
## TO DO
#make a new dataframe to captuire the output
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
#name stuff
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
#make it binary
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
#loop over all the samples with replicates, summing according to the vector
for (column in 1:length(newDataFrame[1,])){
# this if statement checks in case there is only one replicate remaining (this sometimes happens in controls)
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(newDataFrame)
}
# first lets write this little function to help us collapse replicates
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
if(!is.data.frame(INdataframe)){stop("Input dataframe doesn't look like a dataframe")}
#check the vector is a vector
if(!is.vector(vector)){stop("Input vector doesn't look like a vector")}
#check the dataframe contains the vector
## TO DO
#make a new dataframe to captuire the output
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
#name stuff
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
#make it binary
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
#loop over all the samples with replicates, summing according to the vector
for (column in 1:length(newDataFrame[1,])){
# this if statement checks in case there is only one replicate remaining (this sometimes happens in controls)
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(newDataFrame)
}
View(expSamples)
colnames(expSamples)
gsub("(^.*)[.][0-9]$","\\1",colnames(expSamples))
colnames(expSamples)
list.files("rawdata",pattern="....raw.names.csv")
dataset <- list.files("rawdata",pattern="....raw.names.csv")[1]
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
View(expSamples)
match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5))
sort(metadata$SampleID[metadata$SampleType=="Experimental"])
# we cut the metadata here becuase it is strangely formatted
metadata <- metadata[0:120,]
View(metadata)
sort(metadata$SampleID[metadata$SampleType=="Experimental"])
