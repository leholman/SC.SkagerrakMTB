MTB.rich,pch=16)
dev.off()
taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"]
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"]
euk.binary[euk.binary>1] <- 1
euk.binary <- euk[,1:88]
euk.binary[euk.binary>1] <- 1
View(euk.binary)
View(euk.binary)
euk.met.binary <- euk.binary[rownames(euk.binary) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],]
View(euk.met.binary)
colSums(euk.met.binary)
dates$Median[match(as.factor(substr(names(colSums(euk.met.binary)),1,8)),dates$sampleID)]
MTB.richMean <- tapply(colSums(euk.met.binary),FUN=mean,INDEX = substr(names(colSums(euk.met.binary)),1,8))
MTB.richMean
dates$Median[match(names(MTB.richMean),dates$sampleID)]
plot(dates$Median[match(as.factor(substr(names(MTB.rich),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",col="grey78")
points(dates$Median[match(names(MTB.richMean),dates$sampleID)],
MTB.richMean,pch=16)
MTB.rich
MTB.rich <- colSums(euk.met.binary)
dates$Median[match(as.factor(substr(names(colSums(euk.met.binary)),1,8)),dates$sampleID)]
MTB.richMean <- tapply(colSums(euk.met.binary),FUN=mean,INDEX = substr(names(colSums(euk.met.binary)),1,8))
dates$Median[match(names(MTB.richMean),dates$sampleID)]
plot(dates$Median[match(as.factor(substr(names(MTB.rich),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",col="grey78")
points(dates$Median[match(names(MTB.richMean),dates$sampleID)],
MTB.richMean,pch=16)
View(MTB.richEst)
View(euk.met.binary)
euk.Nreps.high.binary.3rep.MET
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
library(scales)
#### METABARCODING ####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
euk.css <- read.csv("cleanedData/clean.EUK.CSS.csv",row.names = 1)
euk.rare <- read.csv("cleanedData/clean.EUK.rarefy.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#Taxonomic overview
## Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
##Domain level taxonomy
Domain.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Abundance"),minAbun=0.01)
Domain.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Count"),minAbun=0.01)
Domain.A.prop <- as.matrix(prop.table(as.matrix(Domain.A),margin = 2))
Domain.C.prop <- as.matrix(prop.table(as.matrix(Domain.C),margin = 2))
row.names(Domain.A.prop)[1] <- "Unknown"
row.names(Domain.C.prop)[1] <- "Unknown"
pdf("figures/tax.domain.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Domain.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Domain.A.prop)),fill=getPalette(dim(Domain.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Domain.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Domain.C.prop)),fill=getPalette(dim(Domain.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Supergroup level taxonomy
Supergroup.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Abundance"),minAbun=0.01)
Supergroup.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Count"),minAbun=0.01)
Supergroup.A.prop <- as.matrix(prop.table(as.matrix(Supergroup.A),margin = 2))
Supergroup.C.prop <- as.matrix(prop.table(as.matrix(Supergroup.C),margin = 2))
row.names(Supergroup.A.prop)[1] <- "Unknown"
row.names(Supergroup.C.prop)[1] <- "Unknown"
pdf("figures/tax.supergroup.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Supergroup.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Supergroup.A.prop)),fill=getPalette(dim(Supergroup.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Supergroup.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Supergroup.C.prop)),fill=getPalette(dim(Supergroup.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Division level taxonomy
Division.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
Division.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Count"),minAbun=0.01)
Division.A.prop <- as.matrix(prop.table(as.matrix(Division.A),margin = 2))
Division.C.prop <- as.matrix(prop.table(as.matrix(Division.C),margin = 2))
row.names(Division.A.prop)[1] <- "Unknown"
row.names(Division.C.prop)[1] <- "Unknown"
pdf("figures/tax.Division.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Division.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Division.A.prop)),fill=getPalette(dim(Division.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Division.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Division.C.prop)),fill=getPalette(dim(Division.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Family level taxonomy
Family.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Abundance"),minAbun=0.01)
Family.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Count"),minAbun=0.01)
Family.A.prop <- as.matrix(prop.table(as.matrix(Family.A),margin = 2))
Family.C.prop <- as.matrix(prop.table(as.matrix(Family.C),margin = 2))
row.names(Family.A.prop)[1] <- "Unknown"
row.names(Family.C.prop)[1] <- "Unknown"
pdf("figures/tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Family.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.A.prop)[1])),ylab="Read Abundance")
legend(108,1,rev(rownames(Family.A.prop)),fill=getPalette(dim(Family.A.prop)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(Family.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.C.prop)[1])),ylab="ASV Counts")
legend(108,1,rev(rownames(Family.C.prop)),fill=getPalette(dim(Family.C.prop)[1]),cex=0.4,bty = "n",y.intersp=0.75)
dev.off()
### Who da fungi!?
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"]
rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"]
#Alpha diversity
pdf("figures/rarefaction.big.pdf",width = 20,height = 13)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
pdf("figures/rarefaction.small.pdf",width = 9,height = 6.5)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
##ASV richness (blind)
euk.Nreps.high.binary.1rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.1rep[euk.Nreps.high.binary.1rep>0.5] <- 1
euk.Nreps.high.binary.3rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep<3] <- 0
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep>2.5] <- 1
euk.Nreps.high.binary.8rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep<8] <- 0
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep>7.5] <- 1
pdf("figures/richness.sample.pdf",width = 8,height = 5)
par(mar=c(6.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.1rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.3rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.8rep),las=2,cex.axis=1)
dev.off()
pdf("figures/richness.date.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(colnames(euk.Nreps.high.binary.1rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.1rep),
pch=16,cex=1.5,ylab="ASV Richness (1rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep),
pch=16,cex=1.5,ylab="ASV Richness (3rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.8rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.8rep),
pch=16,cex=1.5,ylab="ASV Richness (8rep)",xlab="CalYrBP")
dev.off()
### Here we are estimating richness using breakaway which uses this approach - https://onlinelibrary.wiley.com/doi/full/10.1111/biom.12332
### our metabarcoding data will only ever amplify a fraction of total biodiversity
###therefore these are useless as absolute estimates of richness but useful as relative measures of richness along the core
#we use the euk dataset as it contains read data
richEst <- breakaway(euk[,1:88])
richEstimate <- unlist(lapply(richEst,FUN = function(x){x[["estimate"]]}))
richEstimateCIlwr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][1]}))
richEstimateCIupr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][2]}))
pdf("figures/richness.freqEst.pdf",width = 8,height = 5)
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
dev.off()
## Now let's look at the normalised data
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.mean.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),8,15))
names(rich.css) <- gsub('\\.',"-",names(rich.css))
euk.Nreps.high.binary.3rep.MET
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.mean.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),8,15))
names(rich.css) <- gsub('\\.',"-",names(rich.css))
rich.mean.css
names(rich.mean.css) <- gsub('\\.',"-",names(rich.mean.css))
richEst.rare <- breakaway(euk.rare[,1:72])
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
rich.mean.rare <- tapply(richEstimate.rare,FUN=mean,INDEX = substr(names(richEstimate.rare),8,15))
names(rich.rare) <- gsub('\\.',"-",names(rich.rare))
richEst.rare <- breakaway(euk.rare[,1:72])
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
rich.mean.rare <- tapply(richEstimate.rare,FUN=mean,INDEX = substr(names(richEstimate.rare),8,15))
names(rich.mean.rare) <- gsub('\\.',"-",names(rich.mean.rare))
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
pdf("figures/richness.rarefaction.unscaled.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
dev.off()
pdf("figures/richness.rarefaction.scaled.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
dev.off()
compRich <- data.frame("breakaway"=tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
"Richness.8rep"=colSums(euk.Nreps.high.binary.8rep),
"Richness.3rep"=colSums(euk.Nreps.high.binary.3rep),
"Richness.1rep"=colSums(euk.Nreps.high.binary.1rep))
m1 <- lm(colSums(euk.Nreps.high.binary.1rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m2 <- lm(colSums(euk.Nreps.high.binary.3rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m3 <- lm(colSums(euk.Nreps.high.binary.8rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
dev.off()
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared
euk.Nreps.high.binary.3rep
euk.Nreps.high.binary.3rep.PRO <- euk.Nreps.high.binary.3rep[taxPR2.f$tax.Domain=="Bacteria",]
euk.Nreps.high.binary.3rep.PRO <- euk.Nreps.high.binary.3rep[taxPR2.f$tax.Domain=="Bacteria",]
euk.Nreps.high.binary.3rep.EUK.1 <- euk.Nreps.high.binary.3rep[taxPR2.f$tax.Domain=="Eukaryota",]
euk.Nreps.high.binary.3rep.EUK <- euk.Nreps.high.binary.3rep.EUK.1[!(rownames(euk.Nreps.high.binary.3rep.EUK.1) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"]),]
euk.Nreps.high.binary.3rep.MET <- euk.Nreps.high.binary.3rep.EUK.1[rownames(euk.Nreps.high.binary.3rep.EUK.1) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],]
euk.Nreps.high.binary.3rep.MET
colSums(euk.Nreps.high.binary.3rep.MET)
MTB.rich <- colSums(euk.Nreps.high.binary.3rep.MET)
dates$Median[match(as.factor(substr(names(colSums(euk.met.binary)),1,8)),dates$sampleID)]
dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)]
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",col="grey78")
points(dates$Median[match(names(MTB.richMean),dates$sampleID)],
MTB.richMean,pch=16)
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
pdf("figures/figure1/richness.MTB.breakaway.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
pdf("figures/figure1/richness.MTB.3repsMET.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
dev.off()
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",col="grey78")
View(MTG.new)
MTG.binary
colSums(MTG.binary)
View(MTG.binary)
MTG.raw <- read.csv('rawdata/r100.metazoa.csv',row.names = 1)
MTG.new <- MTG.raw[MTG.raw$tax_rank=="genus",]
MTG.wide <- dcast(MTG.new, tax_name ~ sample2, value.var="N_reads")
MTG.wide[is.na(MTG.wide)] <- 0
MTG.binary <- MTG.wide
MTG.binary[MTG.binary>1] <- 1
View(MTG.binary)
MTG.binary <- MTG.wide[,-1]
MTG.binary[MTG.binary>1] <- 1
View(MTG.binary)
MTG.rich <- colSums(MTG.binary)
MTG.rich
plot(dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)],
MTG.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",
xlim=c(0,8200))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",
xlim=c(0,8300))
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)],
MTG.rich,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness",
xlim=c(0,8400))
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="ASV Richness (3 reps Metazoa)",
xlim=c(0,8400))
pdf("figures/figure1/richness.MTB.3repsMET.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
MTB.rich,pch=16,
xlab="CalYrBP",
ylab="ASV Richness (3 reps Metazoa)",
xlim=c(0,8400))
dev.off()
MTG.rich <- colSums(MTG.binary)
pdf("figures/figure1/richness.MTG.metazoa.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)],
MTG.rich,pch=16,
xlab="CalYrBP",
ylab="MTG Genus Richness",
xlim=c(0,8400))
dev.off()
dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)]
dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)]
matchIndex <- match(dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)],
dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)])
matchIndex <- match(dates$Median[match(as.factor(substr(names(MTG.rich),1,8)),dates$sampleID)],
dates$Median[match(as.factor(substr(names(colSums(euk.Nreps.high.binary.3rep.MET)),1,8)),dates$sampleID)])
MTB.rich[matchIndex]
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
lm(MTG.rich~MTB.rich[matchIndex])
summary(lm(MTG.rich~MTB.rich[matchIndex]))
lm1 <- lm(MTG.rich~MTB.rich[matchIndex])
summary(lm1)
abline(lm1,col="red")
lm1 <- lm(MTB.rich[matchIndex],MTG.rich)
summary(lm1)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
abline(lm1,col="red")
lm1 <- lm(MTB.rich[matchIndex],MTG.rich)
summary(lm1)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
abline(lm1,col="red")
lm1 <- lm(MTG.rich,MTB.rich[matchIndex])
lm1 <- lm(MTG.rich~MTB.rich[matchIndex])
summary(lm1)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
abline(lm1,col="red")
lm1 <- lm(MTB.rich[matchIndex]~MTG.rich)
summary(lm1)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
abline(lm1,col="red")
pdf("figures/figure1/richness.comparison.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(MTG.rich,
MTB.rich[matchIndex],
pch=16,
xlab="MTG",
ylab="MTB")
abline(lm1,col="red")
dev.off()
