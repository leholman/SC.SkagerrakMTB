MTB.DS1.b <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1),2)))
MTB.DS2.b <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2),2)))
MTG.DS1.b.s <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14][,-1]),2)))
MTB.DS1.b.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1[,-1]),2)))
MTB.DS2.b.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2[,-1]),2)))
comp1 <- mantel(MTG.DS1.b,MTB.DS1.b,permutations = 10000)
comp2 <- mantel(MTG.DS1.b,MTB.DS2.b,permutations = 10000)
comp3 <- mantel(MTG.DS2.b,MTB.DS1.b.s,permutations = 10000)
comp4 <- mantel(MTG.DS2.b,MTB.DS2.b.s,permutations = 10000)
MTB.wide.DS1
comp1
comp1
comp2
comp3
comp4
MTG.DS1.j <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14]),2)),method = "jaccard",binary = TRUE)
MTG.DS2.j <- vegdist(t(prop.table(as.matrix(MTG.wide.DS2[,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS1.j <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1),2)),method = "jaccard",binary = TRUE)
MTB.DS2.j <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2),2)),method = "jaccard",binary = TRUE)
MTG.DS1.j.s <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14][,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS1.j.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1[,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS2.j.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2[,-1]),2)),method = "jaccard",binary = TRUE)
comp5 <- mantel(MTG.DS1.j,MTB.DS1.j,permutations = 10000)
comp6 <- mantel(MTG.DS1.j,MTB.DS2.j,permutations = 10000)
comp7 <- mantel(MTG.DS2.j,MTB.DS1.j.s,permutations = 10000)
comp8 <- mantel(MTG.DS2.j,MTB.DS2.j.s,permutations = 10000)
comp5
comp6
comp7
comp8
comp1
comp1sink()
comp1##MTG DS1
sink(file="cleanedData/mantel.out.txt")
comp1
comp2
comp3
comp4
comp5
comp6
comp7
comp8
sink()
comp1$perm
comp1$statistic
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
library(scales)
library(TeachingDemos)
library(ape)
####====0.1 Data read in ====####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("MTG.metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
euk.css <- read.csv("cleanedData/clean.EUK.CSS.csv",row.names = 1)
euk.rare <- read.csv("cleanedData/clean.EUK.rarefy.csv",row.names = 1)
riz <- read.csv("cleanedData/clean.RIZ.raw.names.csv.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
####====0.2 Functions ====####
# Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##function to make dataset binary
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
####====0.3 Datasets For Comparison ====####
## Dataset 1 all taxa @ genus
## Dataset 2 metazoa @ genus
## Dataset 3 age-dmg excluded all taxa
## Dataset 4 age-dmg excluded metazoa
#DS1
MTG.raw.DS1 <- read.csv("rawdata/Skagerrak_0_38.csv.gz")
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$tax_rank=="genus",]
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$N_reads>99,]
MTG.raw.DS1$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS1$sample)
MTG.raw.DS1 <- MTG.raw.DS1[!(MTG.raw.DS1$tax_name=="Homo" | MTG.raw.DS1$tax_name=="Loxodonta"),]
#DS2
MTG.raw.DS2 <- MTG.raw.DS1[grepl("metazoa",MTG.raw.DS1$tax_path),]
#DS3
MTG.raw.DS3 <- read.csv('cleanedData/filtered_genus_all.csv',row.names = 1)
MTG.raw.DS3$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS3$sample)
Zostera <- MTG.raw.DS3[grepl("Zostera",MTG.raw.DS3$tax_path),]
MTG.raw.DS3 <- MTG.raw.DS3[!grepl("Viridiplantae",MTG.raw.DS3$tax_path),]
MTG.raw.DS3 <- rbind(MTG.raw.DS3,Zostera)
MTG.raw.DS3 <- MTG.raw.DS3[MTG.raw.DS3$Filtering=="Ancient",]
#DS4
MTG.raw.DS4 <- read.csv('cleanedData/filtered_metazoan_all.csv',row.names = 1)
MTG.raw.DS4$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS4$sample)
MTG.raw.DS4 <- MTG.raw.DS4[MTG.raw.DS4$Filtering=="Ancient",]
## Make wide data
MTG.wide.DS1 <- dcast(MTG.raw.DS1, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS2 <- dcast(MTG.raw.DS2, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS3 <- dcast(MTG.raw.DS3, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS4 <- dcast(MTG.raw.DS4, tax_name ~ sample2, value.var="N_reads",fill = 0)
##MTB
##DS1 all ASVs
##DS2 met ASVs
##DS3 met assigned genus only
MTB.wide.DS1 <- euk.Nreps[,0:11]
MTB.wide.DS2 <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],0:11]
temp <- cbind("Genus"=taxPR2.f$tax.Genus[match(rownames(MTB.wide.DS2),taxPR2.f$X.1)],MTB.wide.DS2)
MTB.wide.DS3 <- aggregate(. ~ Genus, data=temp, FUN = function(x) mean(x, na.rm = TRUE))
MTB.wide.DS3 <- make_binary(MTB.wide.DS3[-1,],1)
MTB.wide.DS3 <- MTB.wide.DS3[,-1]
####====1.0 Comparison Figure ====####
## Pull selected taxa
euk.selectedTaxa <- euk.Nreps[row.names(euk.Nreps) %in% c("ASV_35","ASV_621","ASV_1456","ASV_2468"),]
MTG.selected <- MTG.raw.DS1[MTG.raw.DS1$tax_name %in% c("Gadus","Clupea","Oikopleura","Zostera"),]
MTG.selected.wide <- dcast(MTG.selected, tax_name ~ sample2, value.var="N_reads",fill = 0)
euk.selectedTaxa.long <- melt(euk.selectedTaxa)
ASVid <- data.frame("ASV"=c("ASV_35","ASV_621","ASV_1456","ASV_2468" ),
"ID"=c("Zostera","Oikopleura","Gadus","Clupea"))
euk.selectedTaxa.long$ID <- ASVid$ID[match(euk.selectedTaxa.long$OTU,ASVid$ASV)]
MTB.MTG.comp <- data.frame("Sample"=c(as.character(euk.selectedTaxa.long$variable),MTG.selected$sample2),
"Value"=c(euk.selectedTaxa.long$value,as.numeric(as.character(cut(MTG.selected$N_reads,breaks = c(50,100,1000,5000,10000),labels=c(0.5,1,2.5,4))))),
"ID"=c(euk.selectedTaxa.long$ID,MTG.selected$tax_name),
"Dataset"=c(rep("MTB",length(euk.selectedTaxa.long$variable)),
rep("MTG",length(MTG.selected$sample2))))
MTB.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTB",]
MTG.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTG",]
#ancient data only
#MTG.raw.DS3 <- read.csv('rawdata/Giulia080124/filtered_genus_all_2nc.csv',row.names = 1)
#MTG.raw.DS3$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS3$sample)
#MTG.raw.DS3$Kingdom[ is.na(MTG.raw.DS3$Kingdom)] <- ""
#MTG.raw.DS3 <- MTG.raw.DS3[MTG.raw.DS3$Filtering=="Ancient",]
MTG.raw.DS3.s <- MTG.raw.DS3[MTG.raw.DS3$tax_name %in% c("Gadus","Clupea","Oikopleura","Zostera"),]
MTG.com.a <- dcast(MTG.raw.DS3.s, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.com.a.plot <- melt(MTG.com.a)
MTG.com.a.plot$values <- cut(MTG.com.a.plot$value,breaks = c(50,100,1000,5000,10000),labels=c(0.5,1,2.5,4))
pdf("figures/figure1/ComparisonMTBMTG.pdf",height = 4,width = 11)
par(mar=c(5.1, 7.1, 2.1, 9.1), xpd=TRUE)
plot(dates$Median[match(MTB.com$Sample,dates$sampleID)],
as.numeric(factor(MTB.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))+0.1,
pch=16,cex=MTB.com$Value/2,col="dodgerblue",
ylim=c(0.5,4.5),
xlab="",yaxt='n',
ylab="")
points(dates$Median[match(MTG.com$Sample,dates$sampleID)],
as.numeric(factor(MTG.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))-0.1,
pch=16,cex=MTG.com$Value,col="#f7b988")
points(dates$Median[match(MTG.com.a.plot$variable,dates$sampleID)],
as.numeric(factor(MTG.com.a.plot$tax_name,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))-0.1,
pch=16,cex=as.numeric(as.character(MTG.com.a.plot$values)),col="#d55e00")
axis(2,labels=c("Zostera" ,"Gadus","Oikopleura","Clupea"),1:4,las=1)
legend(8800,4.5,col = "dodgerblue",pch=16,
pt.cex=c(0.5,1.5,4),legend=c("  1 rep","  3 reps","  8 reps"),bty="n",y.intersp=1.5)
legend(8800,2.5,col = "#d55e00",pch=16,
pt.cex=c(2,3,4),legend=c(" 100-1k reads"," 1k-5k reads"," 5k+ reads"),bty="n",y.intersp=1.5)
dev.off()
####====2.0 Alpha Diversity Comparison  ====####
MTG.binary.DS1 <- make_binary(MTG.wide.DS1,1)[,-1]
MTG.binary.DS1 <- MTG.binary.DS1[,!grepl("NTC|BLANK",names(MTG.binary.DS1))]
MTG.binary.DS2 <- make_binary(MTG.wide.DS2,1)[,-1]
MTG.binary.DS3 <- make_binary(MTG.wide.DS3,1)[,-1]
MTG.binary.DS4 <- make_binary(MTG.wide.DS4,1)[,-1]
MTB.binary.DS1 <- make_binary(MTB.wide.DS1,3)
MTB.binary.DS2 <- make_binary(MTB.wide.DS2,3)
## Plots
### test both plot
#colour test
col1 <- c("#d55e00","#4583C4")
col2 <- c("#009e73","#4583C4")
col3 <- c("#d55e00","#4583C4")
col4 <- c("#FFA500","#4583C4")
counter <- 1
for (colours in list(col1,col2,col3,col4)){
pdf(paste0("figures/figure2/Col",counter,"richness.MTG.DS1.MTB.DS1.pdf"),width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col=colours[1],
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 2,col.axis = colours[1],col=colours[1])
mtext("Metagenomic Genus Richness", side = 2, line = 3,col=colours[1])
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS1))),
pch=16,
cex=2,
col=colours[2],
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = colours[2],col=colours[2])
mtext("Metabarcoding ASV Richness", side = 4, line = 3,col=colours[2])
dev.off()
counter <- counter+1
}
## actual plots
pdf("figures/figure2/richness.MTG.DS1.MTB.DS1.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00")
mtext("Metagenomic Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS1))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4")
mtext("Metabarcoding ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
pdf("figures/figure2/richness.MTG.DS2.MTB.DS2.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS2),1,8)),dates$sampleID)],
colSums(MTG.binary.DS2),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00")
mtext("Metagenomic Metazoan Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS2),1,8)),dates$sampleID)],
colSums(MTB.binary.DS2),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS2))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4")
mtext("Metabarcoding Metazoan ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
pdf("figures/figure2/richness.MTG.DS1.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="Metagenomic Genus Richness",
xlim=c(0,8600))
dev.off()
pdf("figures/figure2/richness.MTG.DS2.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS2),1,8)),dates$sampleID)],
colSums(MTG.binary.DS2),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="Metagenomic Metazoa Genus Richness",
xlim=c(0,8600))
dev.off()
pdf("figures/figure2/richness.MTG.DS3.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS3),1,8)),dates$sampleID)],
colSums(MTG.binary.DS3),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="MTG.DS3 Genus Richness",
xlim=c(0,8600))
dev.off()
pdf("figures/figure2/richness.MTG.DS4.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS4),1,8)),dates$sampleID)],
colSums(MTG.binary.DS4),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="MTG.DS4 Genus Richness",
xlim=c(0,8600))
dev.off()
pdf("figures/figure2/richness.MTB.DS1.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="Metabarcoding ASV Richness",
xlim=c(0,8600))
dev.off()
pdf("figures/figure2/richness.MTB.DS2.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS2),1,8)),dates$sampleID)],
colSums(MTB.binary.DS2),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="Metabarcoding Metazoa ASV Richness",
xlim=c(0,8600))
dev.off()
colSums(MTG.binary.DS1)
colSums(MTB.binary.DS1)
pdf("figures/figure2/richness.comp.MTG.DS1-MTB.DS1.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(colSums(MTG.binary.DS1),
colSums(MTB.binary.DS1),
pch=16,
xlab="Genera",
ylab="ASVs")
test <- cor.test(colSums(MTG.binary.DS1),colSums(MTB.binary.DS1))
abline(lm(colSums(MTB.binary.DS1)~colSums(MTG.binary.DS1)),col="red")
legend("topright",legend=c(paste0("Corr = ",round(unname(test$estimate),3)),
paste0("p =",signif(test$p.value,3))),
text.col="red",bty="n")
dev.off()
pdf("figures/figure2/richness.comp.MTG.DS1-MTB.DS2.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(colSums(MTG.binary.DS1),
colSums(MTB.binary.DS2),
pch=16,
xlab="Genera",
ylab="ASVs")
test <- cor.test(colSums(MTG.binary.DS1),colSums(MTB.binary.DS2))
abline(lm(colSums(MTB.binary.DS2)~colSums(MTG.binary.DS1)),col="red")
legend("topright",legend=c(paste0("Corr = ",round(unname(test$estimate),3)),
paste0("p =",signif(test$p.value,3))),
text.col="red",bty="n")
dev.off()
#here we make a little index to subset the MTB dataset as MTG loses a sample
index <- match(names(colSums(MTG.binary.DS2)),names(colSums(MTB.binary.DS1)))
pdf("figures/figure2/richness.comp.MTG.DS2-MTB.DS1.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(colSums(MTG.binary.DS2),
colSums(MTB.binary.DS1)[index],
pch=16,
xlab="Genera",
ylab="ASVs")
test <- cor.test(colSums(MTG.binary.DS2),colSums(MTB.binary.DS1)[index])
abline(lm(colSums(MTB.binary.DS1)[index]~colSums(MTG.binary.DS2)),col="red")
legend("topright",legend=c(paste0("Corr = ",round(unname(test$estimate),3)),
paste0("p =",signif(test$p.value,3))),
text.col="red",bty="n")
dev.off()
index <- match(names(colSums(MTG.binary.DS2)),names(colSums(MTB.binary.DS2)))
pdf("figures/figure2/richness.comp.MTG.DS2-MTB.DS2.pdf",width = 4,height = 4)
par(mar=c(4.1, 4.1, 1.1, 1.1))
plot(colSums(MTG.binary.DS2),
colSums(MTB.binary.DS2)[index],
pch=16,
xlab="Genera",
ylab="ASVs")
test <- cor.test(colSums(MTG.binary.DS2),colSums(MTB.binary.DS2)[index])
abline(lm(colSums(MTB.binary.DS2)[index]~colSums(MTG.binary.DS2)),col="red")
legend("topright",legend=c(paste0("Corr = ",round(unname(test$estimate),3)),
paste0("p =",signif(test$p.value,3))),
text.col="red",bty="n")
dev.off()
####====2.0 Beta Diversity Comparison  ====####
##MTG
MTG.wide.DS1 <- dcast(MTG.raw.DS1, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS2 <- dcast(MTG.raw.DS2, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS3 <- dcast(MTG.raw.DS3, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS4 <- dcast(MTG.raw.DS4, tax_name ~ sample2, value.var="N_reads",fill = 0)
##MTB
MTB.wide.DS1 <- euk.Nreps[,0:11]
MTB.wide.DS2 <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],0:11]
### Mantel tests
# bray
MTG.DS1.b <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14]),2)))
MTG.DS2.b <- vegdist(t(prop.table(as.matrix(MTG.wide.DS2[,-1]),2)))
MTB.DS1.b <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1),2)))
MTB.DS2.b <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2),2)))
MTG.DS1.b.s <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14][,-1]),2)))
MTB.DS1.b.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1[,-1]),2)))
MTB.DS2.b.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2[,-1]),2)))
# jaccard
MTG.DS1.j <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14]),2)),method = "jaccard",binary = TRUE)
MTG.DS2.j <- vegdist(t(prop.table(as.matrix(MTG.wide.DS2[,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS1.j <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1),2)),method = "jaccard",binary = TRUE)
MTB.DS2.j <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2),2)),method = "jaccard",binary = TRUE)
MTG.DS1.j.s <- vegdist(t(prop.table(as.matrix(MTG.wide.DS1[,4:14][,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS1.j.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS1[,-1]),2)),method = "jaccard",binary = TRUE)
MTB.DS2.j.s <- vegdist(t(prop.table(as.matrix(MTB.wide.DS2[,-1]),2)),method = "jaccard",binary = TRUE)
# tests
comp1 <- mantel(MTG.DS1.b,MTB.DS1.b,permutations = 10000)
comp2 <- mantel(MTG.DS1.b,MTB.DS2.b,permutations = 10000)
comp3 <- mantel(MTG.DS2.b,MTB.DS1.b.s,permutations = 10000)
comp4 <- mantel(MTG.DS2.b,MTB.DS2.b.s,permutations = 10000)
comp5 <- mantel(MTG.DS1.j,MTB.DS1.j,permutations = 10000)
comp6 <- mantel(MTG.DS1.j,MTB.DS2.j,permutations = 10000)
comp7 <- mantel(MTG.DS2.j,MTB.DS1.j.s,permutations = 10000)
comp8 <- mantel(MTG.DS2.j,MTB.DS2.j.s,permutations = 10000)
comp1$statistic
comp1$call
comp1$signif
# Define the list of component objects
components <- list(comp1, comp2, comp3, comp4, comp5, comp6, comp7, comp8)
# Extract data from each component and create a row in the data frame
results <- do.call(rbind, lapply(components, function(x) {
data.frame(
Description = x$call,
Statistic = x$statistic,
P_value = x$signif
)
}))
# Assign row names to the results data frame for clarity
rownames(results) <- paste("Component", 1:8)
# Print the results
print(results)
# Define the list of component objects
components <- list(comp1, comp2, comp3, comp4, comp5, comp6, comp7, comp8)
# Extract data from each component and create a row in the data frame
results <- do.call(rbind, lapply(components, function(x) {
data.frame(
Description = deparse(x$call),  # Convert the call object to a character string
Statistic = x$statistic,
P_value = x$signif
)
}))
# Assign row names to the results data frame for clarity
rownames(results) <- paste("Component", 1:8)
# Print the results
print(results)
# Define the list of component objects
components <- list(comp1, comp2, comp3, comp4, comp5, comp6, comp7, comp8)
# Extract data from each component and create a row in the data frame
results <- do.call(rbind, lapply(components, function(x) {
data.frame(
Description = deparse(x$call),  # Convert the call object to a character string
Statistic = x$statistic,
P_value = x$signif
)
}))
# Assign row names to the results data frame for clarity
rownames(results) <- paste("Component", 1:8)
# Print the results
print(results)
# Define the list of component objects
components <- list(comp1, comp2, comp3, comp4, comp5, comp6, comp7, comp8)
# Extract data from each component and create a row in the data frame
results <- do.call(rbind, lapply(components, function(x) {
data.frame(
Description = deparse(x$call),  # Convert the call object to a character string
Statistic = x$statistic,
P_value = x$signif
)
}))
View(results)
write.csv("cleanedData/mantelout.csv",results)
write.csv(results,"cleanedData/mantelout.csv")
