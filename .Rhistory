axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.5)
pdf("figures/figure2/richness.MTG.DS1.MTB.DS1.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
ylim = c(0,max(colSums(MTG.binary.DS1))),
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.8)
mtext("Metagenomic Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS1))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4",cex.axis=0.8)
mtext("Metabarcoding ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
pdf("figures/figure2/richness.MTG.DS2.MTB.DS2.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS2),1,8)),dates$sampleID)],
colSums(MTG.binary.DS2),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
ylim = c(0,max(colSums(MTG.binary.DS2))),
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.8)
mtext("Metagenomic Metazoan Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS2),1,8)),dates$sampleID)],
colSums(MTB.binary.DS2),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS2))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4",cex.axis=0.8)
mtext("Metabarcoding Metazoan ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
yaxt='n', ann=FALSE,
ylim = c(0,max(colSums(MTG.binary.DS1))),
xlim=c(0,8600))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
yaxt='n',
ylim = c(0,max(colSums(MTG.binary.DS1))),
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.8)
mtext("Metagenomic Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS1))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4",cex.axis=0.8)
pdf("figures/figure2/richness.MTG.DS1.MTB.DS1.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS1),1,8)),dates$sampleID)],
colSums(MTG.binary.DS1),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
yaxt='n',
ylim = c(0,max(colSums(MTG.binary.DS1))),
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.8)
mtext("Metagenomic Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS1),1,8)),dates$sampleID)],
colSums(MTB.binary.DS1),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS1))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4",cex.axis=0.8)
mtext("Metabarcoding ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
pdf("figures/figure2/richness.MTG.DS2.MTB.DS2.pdf",width = 4.5,height = 4)
par(mar=c(4.1, 4.1, 1.1, 4.1))
plot(dates$Median[match(as.factor(substr(names(MTG.binary.DS2),1,8)),dates$sampleID)],
colSums(MTG.binary.DS2),
pch=16,
cex=2,
col="#d55e00",
xlab="CalYrBP",
ylab="",
yaxt='n',
ylim = c(0,max(colSums(MTG.binary.DS2))),
xlim=c(0,8600))
axis(side = 2,col.axis = "#d55e00",col="#d55e00",cex.axis=0.8)
mtext("Metagenomic Metazoan Genus Richness", side = 2, line = 3,col="#d55e00")
par(new = TRUE)
plot(dates$Median[match(as.factor(substr(names(MTB.binary.DS2),1,8)),dates$sampleID)],
colSums(MTB.binary.DS2),
axes=FALSE,
ylim=c(0,max(colSums(MTB.binary.DS2))),
pch=16,
cex=2,
col="#4583C4",
xlab="CalYrBP",
ylab="",
xlim=c(0,8600))
axis(side = 4,col.axis = "#4583C4",col="#4583C4",cex.axis=0.8)
mtext("Metabarcoding Metazoan ASV Richness", side = 4, line = 3,col="#4583C4")
dev.off()
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
library(scales)
library(TeachingDemos)
library(ape)
####====0.1 Data read in ====####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("MTG.metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
euk.css <- read.csv("cleanedData/clean.EUK.CSS.csv",row.names = 1)
euk.rare <- read.csv("cleanedData/clean.EUK.rarefy.csv",row.names = 1)
riz <- read.csv("cleanedData/clean.RIZ.raw.names.csv.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
####====0.2 Functions ====####
# Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##function to make dataset binary
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
####====0.3 Datasets For Comparison ====####
## Dataset 1 all taxa @ genus
## Dataset 2 metazoa @ genus
## Dataset 3 age-dmg excluded all taxa
## Dataset 4 age-dmg excluded metazoa
#DS1
MTG.raw.DS1 <- read.csv("rawdata/Skagerrak_0_38.csv.gz")
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$tax_rank=="genus",]
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$N_reads>99,]
MTG.raw.DS1$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS1$sample)
MTG.raw.DS1 <- MTG.raw.DS1[!(MTG.raw.DS1$tax_name=="Homo" | MTG.raw.DS1$tax_name=="Loxodonta"),]
MTG.raw.DS1$sample2
dates$sampleID
dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)]
plot(MTG.raw.DS1$mean_L,dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)])
plot(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],MTG.raw.DS1$mean_L)
plot(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],jitter(MTG.raw.DS1$mean_L))
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)]),MTG.raw.DS1$mean_L)
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],3),MTG.raw.DS1$mean_L)
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],2),MTG.raw.DS1$mean_L)
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],1.5),MTG.raw.DS1$mean_L)
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],1.5),MTG.raw.DS1$mean_L,pch=16)
plot(jitter(dates$Mean[match(MTG.raw.DS4$sample2,dates$sampleID)],1.5),MTG.raw.DS4$mean_L,pch=16)
plot(jitter(dates$Mean[match(MTG.raw.DS3$sample2,dates$sampleID)],1.5),MTG.raw.DS3$mean_L,pch=16)
plot(jitter(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],1.5),MTG.raw.DS2$mean_L,pch=16)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16)
euk.Nreps$ASV_len <- nchar(euk.Nreps$unname.rawSeqs..match.row.names.expSamplesNreps...names.rawSeqs...)
test3 <- melt(euk.Nreps, measure.vars=1:11, variable.name="Sample", value.name="nReps")
test4 <- test3[test3$nReps>0,]
View(test4)
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=4.5)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length")
dev.off()
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,xlab="CalYrBP",
ylab="Average Sequence Length per Taxa")
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=4.5)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,xlab="CalYrBP",ylab="Average Sequence Length Per Taxa (bp)")
dev.off()
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=4.5)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length (bp)")
dev.off()
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=4.5)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length (bp)")
dev.off()
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=5)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,xlab="CalYrBP",ylab="Average Sequence Length Per Taxa (bp)")
dev.off()
pdf("figures/lengthAge.MTG.pdf",width=6.5,height=5)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,xlab="CalYrBP",ylab="Average Sequence Length Per Taxa (bp)")
dev.off()
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=5)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length (bp)")
dev.off()
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,col="#4583C4",
xlab="CalYrBP",
ylab="ASV Length (bp)")
points(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00")
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,col="#4583C4",
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(0,150))
points(proc,pch=16,col="#4583C4",display = "target")
points(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00")
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,col="#4583C4",
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(45,150))
points(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00")
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,col="#4583C4",
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(40,150))
points(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00")
pdf("figures/lengthAge.nReps.pdf",width=6.5,height=5)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 75),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,col="#4583C4",
xlab="CalYrBP",
ylab="ASV Length (bp)")
dev.off()
pdf("figures/lengthAge.MTG.pdf",width=6.5,height=5)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00",xlab="CalYrBP",ylab="Average Sequence Length Per Taxa (bp)")
dev.off()
pdf("figures/lengthAge.MTG.pdf",width=6.5,height=5)
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="#d55e00",xlab="CalYrBP",ylab="Average Sequence Length Per Taxa (bp)",cex=0.8)
dev.off()
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
library(scales)
library(TeachingDemos)
library(ape)
####====0.1 Data read in ====####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("MTG.metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
euk.css <- read.csv("cleanedData/clean.EUK.CSS.csv",row.names = 1)
euk.rare <- read.csv("cleanedData/clean.EUK.rarefy.csv",row.names = 1)
riz <- read.csv("cleanedData/clean.RIZ.raw.names.csv.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
####====0.2 Functions ====####
# Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##function to make dataset binary
make_binary <- function (df,threshold){
df <- sapply(df, function(x) ifelse(is.numeric(x) & x < threshold, 0, 1))
return(as.data.frame(df))
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
####====0.3 Datasets For Comparison ====####
## Dataset 1 all taxa @ genus
## Dataset 2 metazoa @ genus
## Dataset 3 age-dmg excluded all taxa
## Dataset 4 age-dmg excluded metazoa
#DS1
MTG.raw.DS1 <- read.csv("rawdata/Skagerrak_0_38.csv.gz")
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$tax_rank=="genus",]
MTG.raw.DS1 <- MTG.raw.DS1[MTG.raw.DS1$N_reads>99,]
MTG.raw.DS1$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS1$sample)
MTG.raw.DS1 <- MTG.raw.DS1[!(MTG.raw.DS1$tax_name=="Homo" | MTG.raw.DS1$tax_name=="Loxodonta"),]
#DS2
MTG.raw.DS2 <- MTG.raw.DS1[grepl("metazoa",MTG.raw.DS1$tax_path),]
#DS3
MTG.raw.DS3 <- read.csv('cleanedData/filtered_genus_all.csv',row.names = 1)
MTG.raw.DS3$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS3$sample)
Zostera <- MTG.raw.DS3[grepl("Zostera",MTG.raw.DS3$tax_path),]
MTG.raw.DS3 <- MTG.raw.DS3[!grepl("Viridiplantae",MTG.raw.DS3$tax_path),]
MTG.raw.DS3 <- rbind(MTG.raw.DS3,Zostera)
MTG.raw.DS3 <- MTG.raw.DS3[MTG.raw.DS3$Filtering=="Ancient",]
#DS4
MTG.raw.DS4 <- read.csv('cleanedData/filtered_metazoan_all.csv',row.names = 1)
MTG.raw.DS4$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS4$sample)
MTG.raw.DS4 <- MTG.raw.DS4[MTG.raw.DS4$Filtering=="Ancient",]
## Make wide data
MTG.wide.DS1 <- dcast(MTG.raw.DS1, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS2 <- dcast(MTG.raw.DS2, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS3 <- dcast(MTG.raw.DS3, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.wide.DS4 <- dcast(MTG.raw.DS4, tax_name ~ sample2, value.var="N_reads",fill = 0)
##MTB
##DS1 all ASVs
##DS2 met ASVs
##DS3 met assigned genus only
MTB.wide.DS1 <- euk.Nreps[,0:11]
MTB.wide.DS2 <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],0:11]
temp <- cbind("Genus"=taxPR2.f$tax.Genus[match(rownames(MTB.wide.DS2),taxPR2.f$X.1)],MTB.wide.DS2)
MTB.wide.DS3 <- aggregate(. ~ Genus, data=temp, FUN = function(x) mean(x, na.rm = TRUE))
MTB.wide.DS3 <- make_binary(MTB.wide.DS3[-1,],1)
MTB.wide.DS3 <- MTB.wide.DS3[,-1]
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16)
####====1.0 Comparison Figure ====####
## Pull selected taxa
euk.selectedTaxa <- euk.Nreps[row.names(euk.Nreps) %in% c("ASV_35","ASV_621","ASV_1456","ASV_2468"),]
MTG.selected <- MTG.raw.DS1[MTG.raw.DS1$tax_name %in% c("Gadus","Clupea","Oikopleura","Zostera"),]
MTG.selected.wide <- dcast(MTG.selected, tax_name ~ sample2, value.var="N_reads",fill = 0)
euk.selectedTaxa.long <- melt(euk.selectedTaxa)
ASVid <- data.frame("ASV"=c("ASV_35","ASV_621","ASV_1456","ASV_2468" ),
"ID"=c("Zostera","Oikopleura","Gadus","Clupea"))
euk.selectedTaxa.long$ID <- ASVid$ID[match(euk.selectedTaxa.long$OTU,ASVid$ASV)]
MTB.MTG.comp <- data.frame("Sample"=c(as.character(euk.selectedTaxa.long$variable),MTG.selected$sample2),
"Value"=c(euk.selectedTaxa.long$value,as.numeric(as.character(cut(MTG.selected$N_reads,breaks = c(50,100,1000,5000,10000),labels=c(0.5,1,2.5,4))))),
"ID"=c(euk.selectedTaxa.long$ID,MTG.selected$tax_name),
"Dataset"=c(rep("MTB",length(euk.selectedTaxa.long$variable)),
rep("MTG",length(MTG.selected$sample2))))
MTB.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTB",]
MTG.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTG",]
#ancient data only
#MTG.raw.DS3 <- read.csv('rawdata/Giulia080124/filtered_genus_all_2nc.csv',row.names = 1)
#MTG.raw.DS3$sample2 <- gsub(".*(MD9-\\d{4}).*","\\1",MTG.raw.DS3$sample)
#MTG.raw.DS3$Kingdom[ is.na(MTG.raw.DS3$Kingdom)] <- ""
#MTG.raw.DS3 <- MTG.raw.DS3[MTG.raw.DS3$Filtering=="Ancient",]
MTG.raw.DS3.s <- MTG.raw.DS3[MTG.raw.DS3$tax_name %in% c("Gadus","Clupea","Oikopleura","Zostera"),]
MTG.com.a <- dcast(MTG.raw.DS3.s, tax_name ~ sample2, value.var="N_reads",fill = 0)
MTG.com.a.plot <- melt(MTG.com.a)
MTG.com.a.plot$values <- cut(MTG.com.a.plot$value,breaks = c(50,100,1000,5000,10000),labels=c(0.5,1,2.5,4))
pdf("figures/figure1/ComparisonMTBMTG.pdf",height = 4,width = 11)
par(mar=c(5.1, 7.1, 2.1, 9.1), xpd=TRUE)
plot(dates$Median[match(MTB.com$Sample,dates$sampleID)],
as.numeric(factor(MTB.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))+0.1,
pch=16,cex=MTB.com$Value/2,col="dodgerblue",
ylim=c(0.5,4.5),
xlab="",yaxt='n',
ylab="")
points(dates$Median[match(MTG.com$Sample,dates$sampleID)],
as.numeric(factor(MTG.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))-0.1,
pch=16,cex=MTG.com$Value,col="#f7b988")
points(dates$Median[match(MTG.com.a.plot$variable,dates$sampleID)],
as.numeric(factor(MTG.com.a.plot$tax_name,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))-0.1,
pch=16,cex=as.numeric(as.character(MTG.com.a.plot$values)),col="#d55e00")
axis(2,labels=c("Zostera" ,"Gadus","Oikopleura","Clupea"),1:4,las=1)
legend(8800,4.5,col = "dodgerblue",pch=16,
pt.cex=c(0.5,1.5,4),legend=c("  1 rep","  3 reps","  8 reps"),bty="n",y.intersp=1.5)
legend(8800,2.5,col = "#d55e00",pch=16,
pt.cex=c(2,3,4),legend=c(" 100-1k reads"," 1k-5k reads"," 5k+ reads"),bty="n",y.intersp=1.5)
dev.off()
View(MTB.wide.DS1)
View(MTG.raw.DS1)
View(MTG.wide.DS1)
library(vegan)
data(BCI)
View(BCI)
H <- diversity(BCI)
J <- H/log(specnumber(BCI))
plot(h)
plot(H)
plot(J)
View(euk.rare)
MTB.div <- diversity(t(euk.rare))
MTB.div <- diversity(as.numeric(t(euk.rare)))
str(t(euk.rare)))
str(t(euk.rare))
as.matrix(t(euk.rare))
str(as.matrix(t(euk.rare)))
str(BCI)
str(as.data.frame(t(euk.rare)))
as.data.frame(t(euk.rare),stringsAsFactors = F)
test <- as.data.frame(t(euk.rare),stringsAsFactors = F)
View(test)
test <- euk.rare[,1:72]
View(test)
MTB.div <- diversity(t(euk.rare[,1:72]))
MTB.div <- diversity(t(euk.rare[,1:72]))
MTB.eveness <- MTB.div/log(specnumber(t(euk.rare[,1:72])))
plot(MTB.eveness)
View(MTG.wide.DS1)
MTG.wide.DS1[-3,]
MTG.wide.DS1[4:14,]
MTG.div <- diversity(t(MTG.wide.DS1[4:14,]))
test <- t(MTG.wide.DS1[4:14,])
MTG.div <- diversity(t(MTG.wide.DS1[4:14,2:265]))
test <- t(MTG.wide.DS1[4:14,])
View(test)
View(MTG.wide.DS1)
test <- t(MTG.wide.DS1[,4:14])
MTG.div <- diversity(t(MTG.wide.DS1[,4:14]))
MTG.eveness <- MTG.div/log(specnumber(t(MTG.wide.DS1[,4:14])))
plot(MTG.eveness)
names(MTB.eveness)
