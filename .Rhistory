pch=16,cex=1.5,ylab="ASV Richness (8rep)",xlab="CalYrBP")
dev.off()
### Here we are estimating richness using breakaway which uses this approach - https://onlinelibrary.wiley.com/doi/full/10.1111/biom.12332
### our metabarcoding data will only ever amplify a fraction of total biodiversity
###therefore these are useless as absolute estimates of richness but useful as relative measures of richness along the core
#we use the euk dataset as it contains read data
richEst <- breakaway(euk[,1:88])
richEstimate <- unlist(lapply(richEst,FUN = function(x){x[["estimate"]]}))
richEstimateCIlwr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][1]}))
richEstimateCIupr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][2]}))
pdf("figures/richness.freqEst.pdf",width = 8,height = 5)
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
dev.off()
## Are breakaway estimates and raw richness correlated?
compRich <- data.frame("breakaway"=tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
"Richness.8rep"=colSums(euk.Nreps.high.binary.8rep),
"Richness.3rep"=colSums(euk.Nreps.high.binary.3rep),
"Richness.1rep"=colSums(euk.Nreps.high.binary.1rep))
m1 <- lm(colSums(euk.Nreps.high.binary.1rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m2 <- lm(colSums(euk.Nreps.high.binary.3rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m3 <- lm(colSums(euk.Nreps.high.binary.8rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
dev.off()
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared
#Now some taxonomic subsets of richness with 3 reps
euk.Nreps.high.binary.3rep
euk.Nreps.high.binary.3rep.PRO <- euk.Nreps.high.binary.3rep[taxPR2.f$tax.Domain=="Bacteria",]
euk.Nreps.high.binary.3rep.EUK.1 <- euk.Nreps.high.binary.3rep[taxPR2.f$tax.Domain=="Eukaryota",]
euk.Nreps.high.binary.3rep.EUK <- euk.Nreps.high.binary.3rep.EUK.1[!(rownames(euk.Nreps.high.binary.3rep.EUK.1) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"]),]
euk.Nreps.high.binary.3rep.MET <- euk.Nreps.high.binary.3rep.EUK.1[rownames(euk.Nreps.high.binary.3rep.EUK.1) %in% taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],]
pdf("figures/richness.groups.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep.PRO),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep.PRO),
pch=16,cex=1.5,ylab="ASV Richness (Prokaryotes)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep.EUK),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep.EUK),
pch=16,cex=1.5,ylab="ASV Richness (Protists)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep.MET),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep.MET),
pch=16,cex=1.5,ylab="ASV Richness (Metazoa)",xlab="CalYrBP")
dev.off()
out <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11])))
out.j <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11]),binary = TRUE,method = "jaccard"))
out <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11])),trymax = 200)
out.j <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11]),binary = TRUE,method = "jaccard"),trymax = 200)
out <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11])),trymax = 200)
out.j <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.3reps.pdf",height = 6,width = 6)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1))
text(out$points[,1],out$points[,2]+0.02,labels = dates$Median[match(rownames(out$points),dates$sampleID)])
dev.off()
pdf("figures/betadiv.JC.3reps.pdf",height = 6,width = 6)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1))
text(out.j$points[,1],out.j$points[,2]+0.02,labels = dates$Median[match(rownames(out.j$points),dates$sampleID)])
dev.off()
out <- metaMDS(vegdist(t(euk[1:88])))
out.j <- metaMDS(vegdist(t(euk[1:88]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.allreps.pdf",height = 8,width = 8)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
text(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
pdf("figures/betadiv.JC.allreps.pdf",height = 8,width = 8)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1),ylab="",xlab="")
ordihull(out.j,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out.j,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16)
text(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
"
"
"
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
lines(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))
lines(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),lty=1,col'red3')
lines(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),lty=1,col='red3')
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),lty=1,col='red3')
?arrows()
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))
length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))
length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1
1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1){
print(i)
}
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1],
}
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1])
}
i <- 1
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i]
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i]
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1]
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1]
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1) {
print(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1])
}
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1) {
p1 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i]
p2 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i]
p3 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1]
p4 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i+1]
print(p1,p2,p3,p4)
}
print(p1)
print(p2)
p1
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[i]
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[1]
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[1]]
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
i <- 1
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
for (i in 1:length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1) {
print(i)
p1 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p2 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p3 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
p4 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
print(p1,p2,p3,p4)
}
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
print(i)
p1 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p2 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p3 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
p4 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
print(p1,p2,p3,p4)
}
print(p1)
print(p2)
print(p3)
print(p4)
arrows(p1,p2,p3,p4)
arrows(p1,p2,p3,p4,length = 0.5,lwd = 1.5,col = "red3")
arrows(p1,p2,p3,p4,length = 0.1,lwd = 1.5,col = "red3")
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
print(i)
p1 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p2 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]]
p3 <-tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
p4 <-tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]]
arrows(p1,p2,p3,p4,length = 0.1,lwd = 1.5,col = "red3")
}
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")
}
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
out <- metaMDS(vegdist(t(euk[1:88])))
out.j <- metaMDS(vegdist(t(euk[1:88]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.allreps.pdf",height = 8,width = 8)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
out <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11])),trymax = 200)
out.j <- metaMDS(vegdist(t(euk.Nreps.high.binary.3rep[1:11]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.3reps.pdf",height = 6,width = 6)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1))
text(out$points[,1],out$points[,2]+0.02,labels = dates$Median[match(rownames(out$points),dates$sampleID)])
dev.off()
pdf("figures/betadiv.JC.3reps.pdf",height = 6,width = 6)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1))
text(out.j$points[,1],out.j$points[,2]+0.02,labels = dates$Median[match(rownames(out.j$points),dates$sampleID)])
dev.off()
out <- metaMDS(vegdist(t(euk[1:88])))
out.j <- metaMDS(vegdist(t(euk[1:88]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.allreps.pdf",height = 8,width = 8)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
pdf("figures/betadiv.JC.allreps.pdf",height = 8,width = 8)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1),ylab="",xlab="")
ordihull(out.j,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out.j,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
dev.off()
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
##Family level taxonomy
Family.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Abundance"),minAbun=0.01)
Family.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Count"),minAbun=0.01)
Family.A.prop <- as.matrix(prop.table(as.matrix(Family.A),margin = 2))
Family.C.prop <- as.matrix(prop.table(as.matrix(Family.C),margin = 2))
row.names(Family.A.prop)[1] <- "Unknown"
row.names(Family.C.prop)[1] <- "Unknown"
View(Family.C)
View(Family.A.prop)
taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
rownames(euk.Nreps)
rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
View(test)
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
View(test2)
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
#### METABARCODING ####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#Taxonomic overview
## Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
##Domain level taxonomy
Domain.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Abundance"),minAbun=0.01)
Domain.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Count"),minAbun=0.01)
Domain.A.prop <- as.matrix(prop.table(as.matrix(Domain.A),margin = 2))
Domain.C.prop <- as.matrix(prop.table(as.matrix(Domain.C),margin = 2))
row.names(Domain.A.prop)[1] <- "Unknown"
row.names(Domain.C.prop)[1] <- "Unknown"
pdf("figures/tax.domain.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Domain.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Domain.A.prop)),fill=getPalette(dim(Domain.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Domain.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Domain.C.prop)),fill=getPalette(dim(Domain.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Supergroup level taxonomy
Supergroup.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Abundance"),minAbun=0.01)
Supergroup.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Count"),minAbun=0.01)
Supergroup.A.prop <- as.matrix(prop.table(as.matrix(Supergroup.A),margin = 2))
Supergroup.C.prop <- as.matrix(prop.table(as.matrix(Supergroup.C),margin = 2))
row.names(Supergroup.A.prop)[1] <- "Unknown"
row.names(Supergroup.C.prop)[1] <- "Unknown"
pdf("figures/tax.supergroup.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Supergroup.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Supergroup.A.prop)),fill=getPalette(dim(Supergroup.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Supergroup.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Supergroup.C.prop)),fill=getPalette(dim(Supergroup.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Division level taxonomy
Division.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
Division.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Count"),minAbun=0.01)
Division.A.prop <- as.matrix(prop.table(as.matrix(Division.A),margin = 2))
Division.C.prop <- as.matrix(prop.table(as.matrix(Division.C),margin = 2))
row.names(Division.A.prop)[1] <- "Unknown"
row.names(Division.C.prop)[1] <- "Unknown"
pdf("figures/tax.Division.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Division.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Division.A.prop)),fill=getPalette(dim(Division.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Division.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Division.C.prop)),fill=getPalette(dim(Division.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Family level taxonomy
Family.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Abundance"),minAbun=0.01)
Family.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Count"),minAbun=0.01)
Family.A.prop <- as.matrix(prop.table(as.matrix(Family.A),margin = 2))
Family.C.prop <- as.matrix(prop.table(as.matrix(Family.C),margin = 2))
row.names(Family.A.prop)[1] <- "Unknown"
row.names(Family.C.prop)[1] <- "Unknown"
pdf("figures/tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Family.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.A.prop)[1])),ylab="Read Abundance")
legend(108,1,rev(rownames(Family.A.prop)),fill=getPalette(dim(Family.A.prop)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(Family.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.C.prop)[1])),ylab="ASV Counts")
legend(108,1,rev(rownames(Family.C.prop)),fill=getPalette(dim(Family.C.prop)[1]),cex=0.4,bty = "n",y.intersp=0.75)
dev.off()
### Who da fungi!?
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
View(Family.A)
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
View(test2)
