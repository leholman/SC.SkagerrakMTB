legend(8500,130,legend = c("Eukaryota","Chordata","Linear fit"),pch=15,col=c("salmon","orchid3","black"),cex=0.6, bty='n')
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('grey33',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="black",lwd=3)
#plot
pdf("figures/suppl.len/MTB.lengthAgeAllReps.Nreps.met.col.pdf",width=7,height=5.5)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("salmon","black"))
plot(jitter(dates$Mean[match(test4$Sample,dates$sampleID)],amount = 100),
jitter(test4$ASV_len,amount = 0.3),pch=16,cex=1,
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(80,150),
col=as.factor(test4$superkingdom))
points(jitter(dates$Mean[match(test3$Sample,dates$sampleID)],amount = 150),
jitter(test3$ASV_len,amount = 0.15),pch=16,cex=1,col="orchid3")
legend(8500,130,legend = c("Eukaryota","Chordata","Linear fit"),pch=15,col=c("salmon","orchid3","black"),cex=0.6, bty='n')
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('grey33',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="black",lwd=3)
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, median)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, median),type="l",lty=2,col="darkred",lwd=3)
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, mean)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, mean),type="l",lty=2,col="darkblue",lwd=3)
#legend(8500,100,legend = c("Mean","Median"),pch=15,col=c("darkblue","darkred"),cex=0.6, bty='n')
dev.off()
year <- dates$Mean[match(test4$Sample,dates$sampleID)]
len <- test2$ASV_len
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
predictions <- cbind(predictions,predict(lm(len~year),predictions,se.fit = TRUE))
year <- dates$Mean[match(test4$Sample,dates$sampleID)]
len <- test2$ASV_len
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
l1 <- lm(len~year)
year <- dates$Mean[match(test4$Sample,dates$sampleID)]
len <- test2$ASV_len
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
l1 <- lm(len~year)
## all data by reads
euk$ASV_len <- nchar(euk$unname.rawSeqs..match.row.names.expSamples...names.rawSeqs...)
test <- melt(euk, measure.vars=1:88, variable.name="Sample", value.name="nReads")
test2 <- test[test$nReads>5,]
pdf("figures/lengthAgeAllReps.pdf",width=7,height=5.5)
plot(jitter(dates$Median[match(substr(test2$Sample,1,8),dates$sampleID)],amount = 200),
jitter(test2$ASV_len,amount = 0.3),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length")
dev.off()
## nREPS data by >1 reps
euk.Nreps$ASV_len <- nchar(euk.Nreps$unname.rawSeqs..match.row.names.expSamplesNreps...names.rawSeqs...)
test <- melt(euk.Nreps, measure.vars=1:11, variable.name="Sample", value.name="nReads")
test2 <- test[test$nReads>2,]
test2$phylum[is.na(test2$phylum)] <- ""
test3 <- test2[test2$phylum=="Chordata",]
test4 <- test2[!test2$phylum=="Chordata",]
MTB.len.median <- tapply(test2$ASV_len, test2$Sample, median)
MTB.len.mean <- tapply(test2$ASV_len, test2$Sample, mean)
pdf("figures/suppl.len/MTB.lengthAgeAllReps.Nreps.col.pdf",width=7,height=5.5)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("grey","darkolivegreen2","lightsteelblue","darkgrey","salmon"))
plot(jitter(dates$Mean[match(test4$Sample,dates$sampleID)],amount = 100),
jitter(test4$ASV_len,amount = 0.3),pch=16,cex=0.5,
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(80,150),
col=as.factor(test4$superkingdom))
points(jitter(dates$Mean[match(test3$Sample,dates$sampleID)],amount = 150),
jitter(test3$ASV_len,amount = 0.15),pch=16,cex=0.5,col="orchid3")
legend(8500,130,legend = c("Eukaryota","Bacteria","Archaea","Chordata","No Assign"),pch=15,col=c("salmon","lightsteelblue","darkolivegreen2","orchid3","darkgrey"),cex=0.6, bty='n')
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, median)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, median),type="l",lty=2,col="darkred",lwd=3)
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, mean)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, mean),type="l",lty=2,col="darkblue",lwd=3)
#legend(8500,100,legend = c("Mean","Median"),pch=15,col=c("darkblue","darkred"),cex=0.6, bty='n')
dev.off()
year <- dates$Mean[match(test2$Sample,dates$sampleID)]
len <- test2$ASV_len
sink(file="figures/suppl.len/MTB.len_year.lm.out.txt")
summary(lm(test2$ASV_len~dates$Mean[match(test2$Sample,dates$sampleID)]))
sink()
## nREPS data by >1 reps METAZOA
euk.Nreps$ASV_len <- nchar(euk.Nreps$unname.rawSeqs..match.row.names.expSamplesNreps...names.rawSeqs...)
test <- melt(euk.Nreps, measure.vars=1:11, variable.name="Sample", value.name="nReads")
test2 <- test[test$nReads>2,]
test2 <- test2[test2$OTU%in%taxPR2.f$X.1[taxPR2.f$tax.Subdivision=="Metazoa"],]
test2$phylum[is.na(test2$phylum)] <- ""
test3 <- test2[test2$phylum=="Chordata",]
test4 <- test2[!test2$phylum=="Chordata",]
MTB.len.median.met <- tapply(test2$ASV_len, test2$Sample, median)
MTB.len.mean.met <- tapply(test2$ASV_len, test2$Sample, mean)
#predictions
year <- dates$Mean[match(test2$Sample,dates$sampleID)]
len <- test2$ASV_len
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
predictions <- cbind(predictions,predict(lm(len~year),predictions,se.fit = TRUE))
predictions$uppCI <- predictions$fit+predictions$se.fit*1.96
predictions$lwrCI <- predictions$fit-predictions$se.fit*1.96
#plot
pdf("figures/suppl.len/MTB.lengthAgeAllReps.Nreps.met.col.pdf",width=7,height=5.5)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("salmon","black"))
plot(jitter(dates$Mean[match(test4$Sample,dates$sampleID)],amount = 100),
jitter(test4$ASV_len,amount = 0.3),pch=16,cex=1,
xlab="CalYrBP",
ylab="ASV Length (bp)",
ylim=c(80,150),
col=as.factor(test4$superkingdom))
points(jitter(dates$Mean[match(test3$Sample,dates$sampleID)],amount = 150),
jitter(test3$ASV_len,amount = 0.15),pch=16,cex=1,col="orchid3")
legend(8500,130,legend = c("Eukaryota","Chordata","Linear fit"),pch=15,col=c("salmon","orchid3","black"),cex=0.6, bty='n')
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('grey33',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="black",lwd=3)
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, median)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, median),type="l",lty=2,col="darkred",lwd=3)
#points(dates$Mean[match(names(tapply(test2$ASV_len, test2$Sample, mean)),dates$sampleID)],tapply(test2$ASV_len, test2$Sample, mean),type="l",lty=2,col="darkblue",lwd=3)
#legend(8500,100,legend = c("Mean","Median"),pch=15,col=c("darkblue","darkred"),cex=0.6, bty='n')
dev.off()
year <- dates$Mean[match(test2$Sample,dates$sampleID)]
len <- test2$ASV_len
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
l1 <- lm(len~year)
predictions <- cbind(predictions,predict(l1,predictions,se.fit = TRUE))
predictions$uppCI <- predictions$fit+predictions$se.fit*1.96
predictions$lwrCI <- predictions$fit-predictions$se.fit*1.96
plot(year,len,pch=16)
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('mediumslateblue',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="navyblue",lwd=3)
sink(file="figures/suppl.len/MTB.met.len_year.lm.out.txt")
summary(lm(len~year))
sink()
##metagenomics
# all data
MTG.raw.DS1$tax_group <- factor(ifelse(grepl("Bacteria|bacteria", MTG.raw.DS1$tax_path), "Bacteria",
ifelse(grepl("Archaea", MTG.raw.DS1$tax_path), "Archaea",
ifelse(grepl("Eukaryota", MTG.raw.DS1$tax_path), "Eukaryota",
ifelse(grepl("Viruses", MTG.raw.DS1$tax_path), "Viruses", NA)))))
year <- dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)]
len <- MTG.raw.DS1$mean_L
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
predictions <- cbind(predictions,predict(lm(len~year),predictions,se.fit = TRUE))
predictions$uppCI <- predictions$fit+predictions$se.fit*1.96
predictions$lwrCI <- predictions$fit-predictions$se.fit*1.96
pdf("figures/suppl.len/MTG.lengthAgeAllReps.Nreps.col.pdf",width=7,height=5.5)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("darkolivegreen2","lightsteelblue","salmon","bisque3"))
plot(jitter(dates$Mean[match(MTG.raw.DS1$sample2,dates$sampleID)],1),MTG.raw.DS1$mean_L,pch=16,col=MTG.raw.DS1$tax_group,xlab="CalYrBP",ylab="Mean sequence length per taxa (bp)",cex=0.8,ylim=c(40,140))
#points(dates$Mean[match(names(tapply(MTG.raw.DS1$mean_L, MTG.raw.DS1$sample2, mean)),dates$sampleID)],tapply(MTG.raw.DS1$mean_L, MTG.raw.DS1$sample2, mean),type="l",lty=2,col="darkblue",lwd=3)
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('grey33',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="black",lwd=3)
legend(8500,130,legend = c("Eukaryota","Bacteria","Archaea","Viruses","Linear fit"),pch=15,col=c("salmon","lightsteelblue","darkolivegreen2","bisque3","black"),cex=0.6, bty='n')
dev.off()
sink(file="figures/suppl.len/MTG.len_year.lm.out.txt")
summary(lm(len~year))
sink()
#metagenomics metazoa
year <- dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)]
len <- MTG.raw.DS2$mean_L
predictions <- data.frame("year"=seq(min(MTB.year),max(MTB.year),10))
predictions <- cbind(predictions,predict(lm(len~year),predictions,se.fit = TRUE))
predictions$uppCI <- predictions$fit+predictions$se.fit*1.96
predictions$lwrCI <- predictions$fit-predictions$se.fit*1.96
pdf("figures/suppl.len/MTG.lengthAgeAllReps.Nreps.met.col.pdf",width=7,height=5.5)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("darkolivegreen2","lightsteelblue","salmon","bisque3"))
plot(dates$Mean[match(MTG.raw.DS2$sample2,dates$sampleID)],MTG.raw.DS2$mean_L,pch=16,col="salmon",xlab="CalYrBP",ylab="Mean sequence length per taxa (bp)",cex=0.8,ylim=c(40,140))
#points(dates$Mean[match(names(tapply(MTG.raw.DS2$mean_L, MTG.raw.DS2$sample2, mean)),dates$sampleID)],tapply(MTG.raw.DS2$mean_L, MTG.raw.DS2$sample2, mean),type="l",lty=2,col="darkblue",lwd=3)
polygon(c(predictions$year, rev(predictions$year)), c(predictions$uppCI, rev(predictions$lwrCI)), col=add.alpha('grey33',0.3), border=NA)
points(predictions$year,predictions$fit,type="l",col="black",lwd=3)
legend(8500,130,legend = c("Eukaryota","Linear fit"),pch=15,col=c("salmon","black"),cex=0.6, bty='n')
dev.off()
sink(file="figures/suppl.len/MTG.met.len_year.lm.out.txt")
summary(lm(len~year))
sink()
colSums(MTB.binary.DS1)
MTB.binary.DS1
colSums(MTB.binary.DS1)
colSums(MTB.binary.DS2)
MTB.len.median
plot(MTB.len.median,colSums(MTB.binary.DS1))
cor.test(MTB.len.median,colSums(MTB.binary.DS1))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16)
plot(MTB.len.mean,colSums(MTB.binary.DS1),pch=16)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16)
points(MTB.len.mean,colSums(MTB.binary.DS1),pch=16,col="blue")
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
lm(colSums(MTB.binary.DS1)~MTB.len.median)
summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
lm1 <- lm(colSums(MTB.binary.DS1)~MTB.len.median)
lm1$coefficients
lm1$terms
lm1$$coefficients[2, 4]
lm1$$coefficients
lm1$coefficients
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
lm1.summary$r.squared
round(lm1.summary$r.squared,3)
lm1.summary$coefficients
lm1.summary$coefficients
round(lm1.summary$adj.r.squared,3)
lm1.summary$coefficients[2, 4]
summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
lm1.summary$coefficients[2, 4]
round(lm1.summary$coefficients[2, 4],3)
?text
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p   = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTB all
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p   = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTB all
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
View(MTB.DS1.nMDS.b)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1,text.width = max(strwidth(c("Long Label", "Short", "Mid-Length"))))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.2 # Adjust this value to shift text horizontally
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 0.2 # Adjust this value to shift text horizontally
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 2 # Adjust this value to shift text horizontally
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.3 # Adjust this value to shift text horizontally
)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.3 # Adjust this value to shift text horizontally
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.2 # Adjust this value to shift text horizontally
)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.2 # Adjust this value to shift text horizontally
)
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.4 # Adjust this value to shift text horizontally
)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("/tR2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("/tp = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n",adj = 1)
# Example plot
plot(1:10, main = "Example Plot")
# Adding an empty legend
legend("topright",
legend = c("", ""), # Empty legend entries
bty = "n")
# Add custom text to the plot
mtext(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)), side = 3, line = -2, at = 8, col = "red")
mtext(paste0("p = ", round(lm1.summary$coefficients[2, 4], 3)), side = 3, line = -3, at = 8, col = "red")
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.2 # Adjust this value to shift text horizontally
)
legend("topright",
legend = c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))),
text.col = "red",
bty = "n",
text.width = max(strwidth(c(paste0("R2 = ", round(lm1.summary$adj.r.squared, 3)),
paste0("p = ", round(lm1.summary$coefficients[2, 4], 3))))),
adj = 1,
x.intersp = 1.2 # Adjust this value to shift text horizontally
)
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTB met
lm1.met.summary <- summary(lm(colSums(MTB.binary.DS2)~MTB.len.median.met))
plot(MTB.len.median.met,colSums(MTB.binary.DS2),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
colSums(MTG.binary.DS1)
tapply(MTG.raw.DS1$mean_L, MTG.raw.DS1$sample2, mean)
MTB.len.mean <- tapply(MTG.raw.DS1$mean_L, MTG.raw.DS1$sample2, mean)
MTG.len.mean <- tapply(MTG.raw.DS1$mean_L, MTG.raw.DS1$sample2, mean)
MTG.len.mean
names(MTG.len.mean)
MTG.len.mean.met <- tapply(MTG.raw.DS2$mean_L, MTG.raw.DS2$sample2, mean)
names(MTG.binary.DS1)
match(names(MTG.binary.DS1),names(MTG.len.mean))
MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]
## MTG all
lm1.met.summary <- summary(lm(colSums(MTG.binary.DS1)~MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]))
MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))])
MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]
plot(MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))],colSums(MTG.binary.DS1),pch=16,xlab="Mean read length",ylab="Genus richness")
## MTB met
lm1.summary <- summary(lm(colSums(MTB.binary.DS2)~MTB.len.median.met))
plot(MTB.len.median.met,colSums(MTB.binary.DS2),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTB all
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG all
lm1.summary <- summary(lm(colSums(MTG.binary.DS1)~MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]))
plot(MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))],colSums(MTG.binary.DS1),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG met
lm1.summary <- summary(lm(colSums(MTG.binary.DS2)~MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))]))
plot(MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))],colSums(MTG.binary.DS2),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
paclearste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
lm1.summary$coefficients[2, 4],3)
lm1.summary$coefficients[2, 4]
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = <0.001")),text.col = "red",bty="n")
## MTG met
lm1.summary <- summary(lm(colSums(MTG.binary.DS2)~MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))]))
plot(MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))],colSums(MTG.binary.DS2),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = <0.001")),text.col = "red",bty="n")
pdf("figures/suppl.len/Richness.compare.pdf",height = 6,width = 6)
par(mfrow=c(2,2))
## MTB all
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
colSums(MTB.binary.DS2)
## MTB met
lm1.summary <- summary(lm(colSums(MTB.binary.DS2)~MTB.len.median.met))
plot(MTB.len.median.met,colSums(MTB.binary.DS2),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG all
lm1.summary <- summary(lm(colSums(MTG.binary.DS1)~MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]))
plot(MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))],colSums(MTG.binary.DS1),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG met
lm1.summary <- summary(lm(colSums(MTG.binary.DS2)~MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))]))
plot(MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))],colSums(MTG.binary.DS2),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = <0.001")),text.col = "red",bty="n")
dev.off()
#### compare richness to length
pdf("figures/suppl.len/Richness.compare.pdf",height = 6,width = 6)
par(mfrow=c(2,2),mar=c(4.1, 4.1, 2.1, 2.1))
## MTB all
lm1.summary <- summary(lm(colSums(MTB.binary.DS1)~MTB.len.median))
plot(MTB.len.median,colSums(MTB.binary.DS1),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
colSums(MTB.binary.DS2)
## MTB met
lm1.summary <- summary(lm(colSums(MTB.binary.DS2)~MTB.len.median.met))
plot(MTB.len.median.met,colSums(MTB.binary.DS2),pch=16,xlab="Median ASV length",ylab="ASV richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG all
lm1.summary <- summary(lm(colSums(MTG.binary.DS1)~MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]))
plot(MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))],colSums(MTG.binary.DS1),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = ",round(lm1.summary$coefficients[2, 4],3))),text.col = "red",bty="n")
## MTG met
lm1.summary <- summary(lm(colSums(MTG.binary.DS2)~MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))]))
plot(MTG.len.mean.met[match(names(MTG.binary.DS2),names(MTG.len.mean.met))],colSums(MTG.binary.DS2),pch=16,xlab="Mean read length",ylab="Genus richness")
legend("topright",legend=c(paste0("R2 = ",round(lm1.summary$adj.r.squared,3)),
paste0("p = <0.001")),text.col = "red",bty="n")
dev.off()
MTG.len.mean[match(names(MTG.binary.DS1),names(MTG.len.mean))]
length_dat <- data.frame(MTB.len=MTB.len.median,
MTB.m.len=MTB.len.median.met,
MTG.len=MTG.len.mean[match(names(MTB.len.median),names(MTG.len.mean))],
MTG.m.len=MTG.len.mean.met[match(names(MTB.len.median),names(MTG.len.mean.met))])
View(length_dat)
MTB.wide.DS1
## MTB
community_data <- t(prop.table(as.matrix(MTB.wide.DS1),2)))
## MTB
community_data <- t(prop.table(as.matrix(MTB.wide.DS1),2))
dist.b <- vegdist(community_data, method = "bray")
dist.j <- vegdist(community_data, method = "jaccard",binary = TRUE)
dbrda.b<- capscale(dist.b ~ MTB.len, data = length_dat)
dbrda.j<- capscale(dist.j ~ MTB.len, data = length_dat)
summary(dbrda.b)
# Step 4: Significance testing using permutation tests
anova(dbrda.b, permutations = 999)
anova(dbrda.j, permutations = 999)
# Visualization (optional)
plot(dbrda.b, main = "dbRDA - Beta Diversity vs Temperature")
## MTB met
community_data <- t(prop.table(as.matrix(MTB.wide.DS2),2))
dist.b <- vegdist(community_data, method = "bray")
dist.j <- vegdist(community_data, method = "jaccard",binary = TRUE)
dbrda.b<- capscale(dist.b ~ MTB.len, data = length_dat)
dbrda.j<- capscale(dist.j ~ MTB.len, data = length_dat)
anova(dbrda.b, permutations = 999)
anova(dbrda.j, permutations = 999)
MTG.wide.DS1[,4:14]
## MTG
community_data <- t(prop.table(as.matrix(MTG.wide.DS1[,4:14]),2))
dist.b <- vegdist(community_data, method = "bray")
dist.j <- vegdist(community_data, method = "jaccard",binary = TRUE)
dbrda.b<- capscale(dist.b ~ MTB.len, data = length_dat)
dbrda.j<- capscale(dist.j ~ MTB.len, data = length_dat)
anova(dbrda.b, permutations = 999)
anova(dbrda.j, permutations = 999)
## MTG met
community_data <- t(prop.table(as.matrix(MTG.wide.DS2[,4:14]),2))
## MTG met
community_data <- t(prop.table(as.matrix(MTG.wide.DS2[,-1]),2))
dist.b <- vegdist(community_data, method = "bray")
dist.j <- vegdist(community_data, method = "jaccard",binary = TRUE)
dbrda.b<- capscale(dist.b ~ MTB.len, data = length_dat)
dbrda.j<- capscale(dist.j ~ MTB.len, data = length_dat)
anova(dbrda.b, permutations = 999)
anova(dbrda.j, permutations = 999)
MTG.wide.DS2[,-1]
MTG.wide.DS2
dbrda.b<- capscale(dist.b ~ MTB.len[-1], data = length_dat)
dbrda.b<- capscale(dist.b ~ MTB.len[-1], data = length_dat)
dbrda.j<- capscale(dist.j ~ MTB.len[-1], data = length_dat)
anova(dbrda.b, permutations = 999)
anova(dbrda.j, permutations = 999)
plot(dbrda.b)
