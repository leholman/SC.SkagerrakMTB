library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
#### METABARCODING ####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/tax.PR2.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#Alpha diversity
pdf("figures/rarefaction.big.pdf",width = 20,height = 13)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
pdf("figures/rarefaction.small.pdf",width = 9,height = 6.5)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
##ASV richness (blind)
euk.Nreps.high.binary.1rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.1rep[euk.Nreps.high.binary.1rep>0.5] <- 1
euk.Nreps.high.binary.3rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep<3] <- 0
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep>2.5] <- 1
euk.Nreps.high.binary.8rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep<8] <- 0
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep>7.5] <- 1
pdf("figures/richness.sample.pdf",width = 8,height = 5)
par(mar=c(6.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.1rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.3rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.8rep),las=2,cex.axis=1)
dev.off()
pdf("figures/richness.date.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(colnames(euk.Nreps.high.binary.1rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.1rep),
pch=16,cex=1.5,ylab="ASV Richness (1rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep),
pch=16,cex=1.5,ylab="ASV Richness (3rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.8rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.8rep),
pch=16,cex=1.5,ylab="ASV Richness (8rep)",xlab="CalYrBP")
dev.off()
### Here we are estimating richness using breakaway which uses this approach - https://onlinelibrary.wiley.com/doi/full/10.1111/biom.12332
###since our metabarcoding data will only ever amplify a fraction of total biodiversity
###therefore these are useless as absolute estimates of richness but useful as relative measures of richness along the core
#we use the euk dataset as it contains read data
richEst <- breakaway(euk[,1:88])
richEstimate <- unlist(lapply(richEst,FUN = function(x){x[["estimate"]]}))
richEstimateCIlwr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][1]}))
richEstimateCIupr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][2]}))
pdf("figures/richness.freqEst.pdf",width = 8,height = 5)
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
dev.off()
## Are breakaway estimates and raw richness correlated?
compRich <- data.frame("breakaway"=tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
"Richness.8rep"=colSums(euk.Nreps.high.binary.8rep),
"Richness.3rep"=colSums(euk.Nreps.high.binary.3rep),
"Richness.1rep"=colSums(euk.Nreps.high.binary.1rep))
m1 <- lm(colSums(euk.Nreps.high.binary.1rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m2 <- lm(colSums(euk.Nreps.high.binary.3rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m3 <- lm(colSums(euk.Nreps.high.binary.8rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=2,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=2,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=2,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
###insert R2 for models here
dev.off()
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared
summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=2,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=2,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=2,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,2000,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5))
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5))
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5),col="lightblue")
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5),col="lightblue")
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,5),col="dodgerblue")
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,5),col="darkblue")
?text
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,5),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,5),col="darkblue",adj=0)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=2,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=2,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=2,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,5),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,5),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,5),col="darkblue",adj=0)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=2,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=2,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=2,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=2,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=2,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=2,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
dev.off()
pdf("figures/breakaway-richness.comp.pdf",width = 8,height = 6.5)
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
dev.off()
####====0.0 Packages & Parameters====####
library("Biostrings")
#Set some variables
minreads <- 2
items <- NULL
#Set the seed
set.seed("123456")
#Read in metadata
metadata<-read.csv("metadata.csv")
metadata$rep <- gsub(".*-([0-9])$","\\1",metadata$SampleID)
EUK.data<- read.csv("rawData/EUK.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.parsed.csv",row.names = 1)
euk.tax <- ParseTaxonomy(pctThreshold = 99,
covpct = 95,
blastoutput = "taxonomy/raw/EUK.dada2.raw.taxonomy.txt",
lineages = "taxonomy/ncbi_lineages_2023-04-27.csv.gz")
library(metabarTOAD)
euk.tax <- ParseTaxonomy(pctThreshold = 99,
covpct = 95,
blastoutput = "taxonomy/raw/EUK.dada2.raw.taxonomy.txt",
lineages = "taxonomy/ncbi_lineages_2023-04-27.csv.gz")
write.csv(euk.tax,"taxonomy/EUK.parsed.csv")
####====0.0 Packages & Parameters====####
library("Biostrings")
#Set some variables
minreads <- 2
items <- NULL
#Set the seed
set.seed("123456")
#Read in metadata
metadata<-read.csv("metadata.csv")
metadata$rep <- gsub(".*-([0-9])$","\\1",metadata$SampleID)
EUK.data<- read.csv("rawData/EUK.raw.names.csv",row.names = 1)
EUK.tax <- read.csv("taxonomy/EUK.parsed.csv",row.names = 1)
EUK.asvs <- read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = TRUE)
####====0.0 Packages & Parameters====####
library("Biostrings")
?read.fasta
library("seqinr")
EUK.asvs <- read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = TRUE)
EUK.asv.len <- nchar(unlist(EUK.asvs))
hist(EUK.asv.len,breaks=100)
colnames(EUK.data)
EUK.all <- cbind(EUK.data,EUK.tax[match(rownames(EUK.data),EUK.tax$OTU),])
sampleIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.data))
unique(sampleIndex)
EUK.nReps <- data.frame(matrix(0,nrow = length(EUK.data[,1]),ncol=length(unique(sampleIndex))))
colnames(EUK.nReps) <- unique(sampleIndex)
rownames(EUK.nReps) <- rownames(EUK.data)
EUK.binary <-EUK.data
EUK.binary[EUK.binary<1] <- 0
EUK.binary[EUK.binary>0] <- 1
binaryIndex <- gsub("(^.*)[.][0-9]$","\\1",colnames(EUK.binary))
for (column in 1:length(EUK.nReps[1,])){
EUK.nReps[,column] <- rowSums(EUK.binary[,binaryIndex %in% colnames(EUK.nReps)[column]])
}
EUK.all.nReps <- cbind(EUK.nReps,EUK.tax[match(rownames(EUK.binary),EUK.tax$OTU),])
View(EUK.all.nReps)
write.csv(EUK.all,"rawdata/EUK.raw.wTAX.csv")
write.csv(EUK.all.nReps,"rawdata/EUK.raw.nReps.wTAX.csv")
# first lets write this little function to help us collapse replicates
NrepsMaker <- function(INdataframe,vector){
##write these checks
#check the dataframe is a dataframe
if(!is.data.frame(INdataframe)){stop("Input dataframe doesn't look like a dataframe")}
#check the vector is a vector
if(!is.vector(vector)){stop("Input vector doesn't look like a vector")}
#check the dataframe contains the vector
## TO DO
#make a new dataframe to captuire the output
newDataFrame <- data.frame(matrix(0,nrow = length(INdataframe[,1]),ncol=length(unique(vector))))
#name stuff
colnames(newDataFrame) <- unique(vector)
rownames(newDataFrame) <- rownames(INdataframe)
#make it binary
INdataframe[INdataframe<1] <- 0
INdataframe[INdataframe>0] <- 1
#loop over all the samples with replicates, summing according to the vector
for (column in 1:length(newDataFrame[1,])){
# this if statement checks in case there is only one replicate remaining (this sometimes happens in controls)
if(is.vector(INdataframe[,vector %in% colnames(newDataFrame)[column]])){
newDataFrame[,column]  <- INdataframe[,vector %in% colnames(newDataFrame)[column]]}else{
newDataFrame[,column] <- rowSums(INdataframe[,vector %in% colnames(newDataFrame)[column]])}
}
return(newDataFrame)
}
# we cut the metadata here becuase it is strangely formatted
metadata <- metadata[0:120,]
list.files("rawdata",pattern="....raw.names.csv")
dataset <- "EUK.raw.names.csv"
datasetname <- substr(dataset,1,3)
indata <- read.csv(paste0("rawdata/",datasetname,".raw.names.csv"),row.names = 1)
expSamples <- indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="Experimental"])),substring(colnames(indata),5)))]
ctlSamples <-indata[,na.omit(match(gsub(",|-",".",sort(metadata$SampleID[metadata$SampleType=="ControlN"])),substring(colnames(indata),5)))]
#Filter 1 - minimum number of reads for any ID
expSamples[expSamples< minreads] <- 0
expSamples <- expSamples[rowSums(expSamples) > 0,]
controlsCONTAM <- ctlSamples[rowSums(ctlSamples) > 0,]
for (contamOTU in 1:length(controlsCONTAM[,1])){
loopOTU <- row.names(controlsCONTAM[contamOTU,])
loopMax <- max(as.numeric(controlsCONTAM[contamOTU,]))
#loopSum <- sum(as.numeric(controlsCONTAM[contamOTU,]))
if (any(is.na(expSamples[loopOTU,]))){next}
expSamples[loopOTU,expSamples[loopOTU,]<loopMax] <- 0
print(paste("Cleaning contaminants",contamOTU))
}
size <- rbind("EUK"=c(75,150),"RIZ"=c(75,140))
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
greenlistLength <- names(rawSeqs[nchar(rawSeqs)>size[datasetname,1] & nchar(rawSeqs)<size[datasetname,2]])
expSamples <- expSamples[rownames(expSamples) %in% greenlistLength,]
##### make a version of the data with Nreps
expSamplesNreps <- NrepsMaker(expSamples,gsub("(^.*)[.][0-9]$","\\1",colnames(expSamples)))
rawSeqs <- as.character(readDNAStringSet(paste0("rawdata/ASVs/",datasetname,".DADA2.ASVs.fasta")))
Assignments <- read.csv(paste0("taxonomy/",datasetname,".parsed.csv"),row.names = 1)
CleanedOutput <- cbind(expSamples,
unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))],
Assignments[match(row.names(expSamples),Assignments$OTU),])
dir.create("cleanedData",showWarnings = F)
cleanSeqs <- unname(rawSeqs)[match(row.names(expSamples),names(rawSeqs))]
View(euk.tax)
write.csv(CleanedOutput,paste0("cleanedData/clean.",dataset,".csv"))
CleanedNrepsOutput <- cbind(expSamplesNreps,
unname(rawSeqs)[match(row.names(expSamplesNreps),names(rawSeqs))],
Assignments[match(row.names(expSamplesNreps),Assignments$OTU),])
write.csv(CleanedNrepsOutput,paste0("cleanedData/clean.",dataset,".Nreps.csv"))
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/tax.PR2.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2 <-read.csv("taxonomy/tax.PR2.csv",row.names = 1)
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
View(taxPR2.f)
taxPR2.f[is.na(taxPR2.f)] <- ""
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
euk.Nreps.high.binary.1rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.1rep[euk.Nreps.high.binary.1rep>0.5] <- 1
euk.Nreps.high.binary.3rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep<3] <- 0
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep>2.5] <- 1
euk.Nreps.high.binary.8rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep<8] <- 0
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep>7.5] <- 1
par(mar=c(6.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.1rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.3rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.8rep),las=2,cex.axis=1)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(colnames(euk.Nreps.high.binary.1rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.1rep),
pch=16,cex=1.5,ylab="ASV Richness (1rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep),
pch=16,cex=1.5,ylab="ASV Richness (3rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.8rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.8rep),
pch=16,cex=1.5,ylab="ASV Richness (8rep)",xlab="CalYrBP")
#we use the euk dataset as it contains read data
richEst <- breakaway(euk[,1:88])
richEstimate <- unlist(lapply(richEst,FUN = function(x){x[["estimate"]]}))
richEstimateCIlwr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][1]}))
richEstimateCIupr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][2]}))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness")
compRich <- data.frame("breakaway"=tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
"Richness.8rep"=colSums(euk.Nreps.high.binary.8rep),
"Richness.3rep"=colSums(euk.Nreps.high.binary.3rep),
"Richness.1rep"=colSums(euk.Nreps.high.binary.1rep))
m1 <- lm(colSums(euk.Nreps.high.binary.1rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m2 <- lm(colSums(euk.Nreps.high.binary.3rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
m3 <- lm(colSums(euk.Nreps.high.binary.8rep)~tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)))
plot(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,col="lightblue",ylim=c(0,2200),xlim=c(0,1100),
xlab="Breakaway Estimate",ylab="Observed Richness (8rep)")
abline(m1,col="lightblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,col="dodgerblue")
abline(m2,col="dodgerblue",lwd=1.5)
points(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8)),
colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,col="darkblue")
abline(m3,col="darkblue",lwd=1.5)
legend("topleft",border=NA,legend=c("1 rep","3 rep","8 rep"),col=c("lightblue","dodgerblue","darkblue"),pch=16,pt.cex=2)
text(800,1800,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.1rep)))$adj.r.squared,4),col="lightblue",adj=0)
text(800,700,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.3rep)))$adj.r.squared,4),col="dodgerblue",adj=0)
text(800,200,round(summary(lm(tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))~colSums(euk.Nreps.high.binary.8rep)))$adj.r.squared,4),col="darkblue",adj=0)
View(taxPR2.f)
hist(taxPR2.f$Supergroup.1,breaks=100)
hist(taxPR2.f$Kingdom.1,breaks=100)
View(euk)
View(euk)
test <- CountTable(taxPR2.f$Kingdom.1,euk[,1:88],output = "Abundance")
View(test)
test <- CountTable(as.character(taxPR2.f$Kingdom.1),euk[,1:88],output = "Abundance")
View(test)
unique(taxPR2.f$Kingdom.1)
test <- CountTable(as.character(taxPR2.f$Kingdom),euk[,1:88],output = "Abundance")
View(test)
View(test)
test <- CountTable(as.character(taxPR2.f$Supergroup),euk[,1:88],output = "Abundance")
View(test)
test <- CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance")
View(test)
test <- CountTable(as.character(taxPR2.f$Class),euk[,1:88],output = "Abundance")
test <- minAbundance(CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
View(test)
barplot(test)
View(test)
barplot(as.matrix(propotable(test)))
barplot(as.matrix(proptable(test)))
barplot(as.matrix(prop.table(test)))
barplot(as.matrix(prop.table(test),1))
barplot(as.matrix(prop.table(test),2))
barplot(as.matrix(prop.table(test,margin = 2)))
barplot(as.matrix(prop.table(test,margin = 1)))
barplot(as.matrix(prop.table(test)))
prop.table(test,margin = 1)
prop.table(test,margin = 2)
prop.table(test,1)
prop.table(test)
View(test)
barplot(as.matrix(prop.table(as.matrix(test),margin = 1)))
barplot(as.matrix(prop.table(as.matrix(test),margin = 2)))
dev.off()
barplot(as.matrix(prop.table(as.matrix(test),margin = 2)))
View(taxPR2.f)
test2 <- CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance")
barplot(as.matrix(prop.table(as.matrix(test2),margin = 2)))
test2 <- CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Count")
test2 <- CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance")
barplot(as.matrix(prop.table(as.matrix(test2),margin = 2)))
View(test2)
test2 <- CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Count")
View(test2)
barplot(as.matrix(prop.table(as.matrix(test2),margin = 2)))
test2 <-  minAbundance(CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Count"),minAbun=0.01)
barplot(as.matrix(prop.table(as.matrix(test2),margin = 2)))
test2 <-  minAbundance(CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
test2 <-  minAbundance(CountTable(as.character(taxPR2.f$Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
barplot(as.matrix(prop.table(as.matrix(test2),margin = 2)))
View(test2)
View(Assignments)
View(taxPR2)
PR2assign <- assignTaxonomy(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta"),refFasta = "pr2_version_5.0.0_SSU_dada2.fasta.gz",tryRC = TRUE,multithread = TRUE,taxLevels = c("Domain","Supergroup","Division","Subdivision","Class","Order","Family","Genus","Species"),outputBootstraps = TRUE)
library(dada2)
PR2assign <- assignTaxonomy(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta"),refFasta = "pr2_version_5.0.0_SSU_dada2.fasta.gz",tryRC = TRUE,multithread = TRUE,taxLevels = c("Domain","Supergroup","Division","Subdivision","Class","Order","Family","Genus","Species"),outputBootstraps = TRUE)
library(seqinr)
PR2assign <- assignTaxonomy(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta"),refFasta = "pr2_version_5.0.0_SSU_dada2.fasta.gz",tryRC = TRUE,multithread = TRUE,taxLevels = c("Domain","Supergroup","Division","Subdivision","Class","Order","Family","Genus","Species"),outputBootstraps = TRUE)
read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta")
PR2assign <- assignTaxonomy(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = T),refFasta = "pr2_version_5.0.0_SSU_dada2.fasta.gz",tryRC = TRUE,multithread = TRUE,taxLevels = c("Domain","Supergroup","Division","Subdivision","Class","Order","Family","Genus","Species"),outputBootstraps = TRUE)
?assignTaxonomy()
test <- read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = T)
test <- unlist(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = T))
PR2assign <- assignTaxonomy( unlist(read.fasta("rawdata/ASVs/EUK.DADA2.ASVs.fasta",as.string = T)),refFasta = "pr2_version_5.0.0_SSU_dada2.fasta.gz",tryRC = TRUE,multithread = TRUE,taxLevels = c("Domain","Supergroup","Division","Subdivision","Class","Order","Family","Genus","Species"),outputBootstraps = TRUE)
PR2master <- cbind(colnames(EUK.TotalTable.named),PR2assign$tax,PR2assign$boot)
write.csv(PR2master,"tax.PR2.csv")
View(PR2assign)
write.csv(PR2assign,"tax.PR2.csv")
View(PR2assign)
