pdf("figures/betadiv.BC.3reps.pdf",height = 6,width = 6)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1))
text(out$points[,1],out$points[,2]+0.02,labels = dates$Median[match(rownames(out$points),dates$sampleID)])
dev.off()
pdf("figures/betadiv.JC.3reps.pdf",height = 6,width = 6)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,ylab="",xlab="",
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1))
text(out.j$points[,1],out.j$points[,2]+0.02,labels = dates$Median[match(rownames(out.j$points),dates$sampleID)])
dev.off()
out <- metaMDS(vegdist(t(euk[1:88])))
out.j <- metaMDS(vegdist(t(euk[1:88]),binary = TRUE,method = "jaccard"),trymax = 200)
pdf("figures/betadiv.BC.allreps.pdf",height = 8,width = 8)
plot(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out$points[,2])-0.1,max(out$points[,2])+0.1),
xlim=c(min(out$points[,1])-0.1,max(out$points[,1])+0.1),ylab="",xlab="")
ordihull(out,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out$points[,1],out$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
pdf("figures/betadiv.JC.allreps.pdf",height = 8,width = 8)
plot(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16,
ylim=c(min(out.j$points[,2])-0.1,max(out.j$points[,2])+0.1),
xlim=c(min(out.j$points[,1])-0.1,max(out.j$points[,1])+0.1),ylab="",xlab="")
ordihull(out.j,substr(colnames(euk[1:88]),1,8),draw = "polygon",col="darkgrey",lty=0)
ordispider(out.j,substr(colnames(euk[1:88]),1,8),lty=1,lwd=2,col="grey2")
points(out.j$points[,1],out.j$points[,2],col="darkred",cex=1.3,pch=16)
for (i in 1:(length(tapply(out$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)))-1)) {
arrows(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i]],
tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))[[i+1]],
length = 0.1,lwd = 1.5,col = "red3")}
text(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8)),
tapply(out.j$points[,2],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))+0.25,
labels = dates$Median[match(names(tapply(out.j$points[,1],FUN=mean,INDEX = substr(colnames(euk[1:88]),1,8))),dates$sampleID)],
col="darkblue")
dev.off()
## Pull selected taxa
euk.selectedTaxa <- euk.Nreps[row.names(euk.Nreps) %in% c("ASV_35","ASV_621","ASV_1456","ASV_2468"),]
MTG <-read.csv("rawdata/r100.metazoa.csv",row.names =1)
MTG.genus <- MTG[MTG$tax_rank=="genus",]
MTG.selected <- MTG.genus[MTG.genus$tax_name %in% c("Gadus","Clupea","Oikopleura"),]
MTG.P <- read.csv("rawdata/r100.viridiplantae.csv",row.names = 1)
MTG.P.genus <- MTG.P[MTG.P$tax_rank=="genus",]
MTG.zostera <- MTG.P.genus[MTG.P.genus$tax_name =="Zostera",]
MTG.selected.2 <- rbind(MTG.selected,MTG.zostera)
MTG.wide <- dcast(MTG.selected.2, tax_name ~ sample2, value.var="N_reads")
euk.selectedTaxa.long <- melt(euk.selectedTaxa)
euk.selectedTaxa.long$variable
MTG.selected.2$sample2
euk.selectedTaxa.long$OTU
ASVid <- data.frame("ASV"=c("ASV_35","ASV_621","ASV_1456","ASV_2468" ),
"ID"=c("Zostera","Oikopleura","Gadus","Clupea"))
euk.selectedTaxa.long$ID <- ASVid$ID[match(euk.selectedTaxa.long$OTU,ASVid$ASV)]
MTB.MTG.comp <- data.frame("Sample"=c(as.character(euk.selectedTaxa.long$variable),MTG.selected.2$sample2),
"Value"=c(euk.selectedTaxa.long$value,cut(MTG.selected.2$N_reads,breaks = c(50,100,1000,5000,10000),labels=c(0.5,1,2.5,4))),
"ID"=c(euk.selectedTaxa.long$ID,MTG.selected.2$tax_name),
"Dataset"=c(rep("MTB",length(euk.selectedTaxa.long$variable)),
rep("MTG",length(MTG.selected.2$sample2))))
MTB.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTB",]
MTG.com <- MTB.MTG.comp[MTB.MTG.comp$Dataset=="MTG",]
pdf("figures/ComparisonMTBMTG.pdf",height = 4,width = 11)
par(mar=c(5.1, 7.1, 2.1, 9.1), xpd=TRUE)
plot(dates$Median[match(MTB.com$Sample,dates$sampleID)],
as.numeric(factor(MTB.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))+0.1,
pch=16,cex=MTB.com$Value/2,col="dodgerblue",
ylim=c(0.5,4.5),
xlab="",yaxt='n',
ylab="")
points(dates$Median[match(MTG.com$Sample,dates$sampleID)],
as.numeric(factor(MTG.com$ID,levels=c("Zostera" ,"Gadus","Oikopleura","Clupea")))-0.1,
pch=16,cex=MTG.com$Value,col="darkred")
axis(2,labels=c("Zostera" ,"Gadus","Oikopleura","Clupea"),1:4,las=1)
legend(9000,4.5,col = "dodgerblue",pch=16,
pt.cex=c(0.5,1.5,4),legend=c("  1 rep","  3 reps","  8 reps"),bty="n",y.intersp=1.5)
legend(9000,2.5,col = "darkred",pch=16,
pt.cex=c(2,3,4),legend=c(" 100-1k reads"," 1k-5k reads"," 5k+ reads"),bty="n",y.intersp=1.5)
dev.off()
### Extra stuff
#length age relationship
euk$ASV_len <- nchar(euk$unname.rawSeqs..match.row.names.expSamples...names.rawSeqs...)
test <- melt(euk, measure.vars=1:88, variable.name="Sample", value.name="nReads")
test2 <- test[test$nReads>5,]
pdf("figures/lengthAgeAllReps.pdf",width=7,height=5.5)
plot(jitter(dates$Median[match(substr(test2$Sample,1,8),dates$sampleID)],amount = 200),
jitter(test2$ASV_len,amount = 0.3),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length")
dev.off()
euk.Nreps$ASV_len <- nchar(euk.Nreps$unname.rawSeqs..match.row.names.expSamplesNreps...names.rawSeqs...)
test3 <- melt(euk.Nreps, measure.vars=1:11, variable.name="Sample", value.name="nReps")
test4 <- test3[test3$nReps>0,]
pdf("figures/lengthAge.nReps.pdf",width=11,height=7)
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length")
dev.off()
pdf("figures/lengthAge.nReps.cols.pdf",width=11,height=7)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("grey","blue","darkgreen","darkgrey","red"))
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length",
col=as.factor(test4$superkingdom))
legend(9000,130,legend = c("Eukaryotes","Bacteria","Archaea","No Assign"),pch=15,col=c("red","darkgreen","blue","grey"),cex=0.5, bty='n')
dev.off()
View(test4)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("grey","blue","darkgreen","darkgrey","red"))
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length",
col=as.factor(test4$superkingdom))
legend(9000,130,legend = c("Eukaryotes","Bacteria","Archaea","No Assign"),pch=15,col=c("red","darkgreen","blue","grey"),cex=0.5, bty='n')
test4$phylum=="Chordata"
table(test4$phylum=="Chordata")
test5 <- test4[test4$phylum=="Chordata",]
points(jitter(dates$Median[match(test5$Sample,dates$sampleID)],amount = 150),
jitter(test5$ASV_len,amount = 0.15),pch=16,cex=0.3,col="purple",pch=16)
points(jitter(dates$Median[match(test5$Sample,dates$sampleID)],amount = 150),
jitter(test5$ASV_len,amount = 0.15),pch=16,cex=0.5,col="purple")
pdf("figures/lengthAge.nReps.cols.pdf",width=11,height=7)
par(mar=c(5.1, 4.1, 2.1, 4.1), xpd=TRUE)
palette(c("grey","blue","darkgreen","darkgrey","red"))
plot(jitter(dates$Median[match(test4$Sample,dates$sampleID)],amount = 150),
jitter(test4$ASV_len,amount = 0.15),pch=16,cex=0.3,
xlab="CalYrBP",
ylab="ASV Length",
col=as.factor(test4$superkingdom))
points(jitter(dates$Median[match(test5$Sample,dates$sampleID)],amount = 150),
jitter(test5$ASV_len,amount = 0.15),pch=16,cex=0.5,col="purple")
legend(9000,130,legend = c("Eukaryotes","Bacteria","Archaea","Chordata","No Assign"),pch=15,col=c("red","darkgreen","blue","purple","grey"),cex=0.5, bty='n')
dev.off()
tapply(richEstimate,FUN=mean,INDEX = substr(names(richEstimate),1,8))
richEst.css <- breakaway(euk.css[,1:88])
richEst.css <- breakaway(euk.css[,1:88])
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
richEst.css <- breakaway(euk.css[,1:88])
richEst.css
View(euk.css)
richEst.css <- breakaway(euk.css)
str(euk.css)
####====0.0 Packages====####
library(tidyverse)
library(dplyr)
library(maditr)
library(vegan)
library(breakaway)
library(RColorBrewer)
library(scales)
#### METABARCODING ####
euk <- read.csv("cleanedData/clean.EUK.raw.names.csv.csv",row.names = 1)
euk.Nreps <- read.csv("cleanedData/clean.EUK.raw.names.csv.Nreps.csv",row.names = 1)
dates <-read.csv("metadataAge.csv")
dates$sampleID <- gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1", dates$Sample))
taxPR2 <-read.csv("taxonomy/EUK.tax.PR2.csv",row.names = 1)
euk.css <- read.csv("cleanedData/clean.EUK.CSS.csv",row.names = 1)
euk.rare <- read.csv("cleanedData/clean.EUK.rarefy.csv",row.names = 1)
#Correct col names
colnames(euk) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk[,1:88]))),colnames(euk[,89:99]))
colnames(euk.Nreps) <- c(gsub("\\.","-",gsub(".*(MD9.\\d{4})","\\1",colnames(euk.Nreps[,1:11]))),colnames(euk.Nreps[,12:22]))
#Taxonomic overview
## Some functions to help
CountTable <- function(in.taxonomy,in.data,output="Count",some.unassigned=T){
if(length(in.taxonomy)!=length(in.data[,1])){stop("Dataframe and corresponding taxonomy are not the same length")}
in.taxonomy[is.na(in.taxonomy)] <- ""
out.dat <- as.data.frame(matrix(ncol=length(in.data[1,]),nrow=length(unique(in.taxonomy))))
rownames(out.dat) <- sort(unique(in.taxonomy))
colnames(out.dat) <- colnames(in.data)
out.dat.abundance <- out.dat
for (sample in 1:length(in.data[1,])){
out.dat[,sample] <- table(in.taxonomy[in.data[,sample]>0])[match(sort(unique(in.taxonomy)),names(table(in.taxonomy[in.data[,sample]>0])))]
out.dat.abundance[,sample] <- aggregate(in.data[,sample], by=list(Category=in.taxonomy), FUN=sum)[,2]
}
out.dat[is.na(out.dat)] <- 0
if(some.unassigned==T){rownames(out.dat)[1] <- "Unassigned"}
if(output=="Count"){return(out.dat)}else if(
output=="Abundance"){return(out.dat.abundance)}
}
#Then we write a function for concatenating small abundance groups per sample
minAbundance <- function(inputtable=NA,minAbun= 0.01){
inputtable <- rbind(inputtable,rep(0,dim(inputtable)[1]))
rownames(inputtable)[dim(inputtable)[1]] <- "Others"
for (row in 1:dim(inputtable)[2]){
min <- sum(inputtable[,row])*minAbun
others <- sum(inputtable[inputtable[,row]<min,row])
inputtable[inputtable[,row]<min,row] <- 0
inputtable["Others",row] <- others
inputtable <- inputtable[rowSums(inputtable)>1,]
}
return(inputtable)
}
##Colour function
#getPalette = colorRampPalette(brewer.pal(9, "Pastel1"))
getPalette = colorRampPalette(brewer.pal(9, "Set3"))
#First we get rid of poor assignments - these can be changed
taxPR2.f <- taxPR2[match(row.names(euk),taxPR2$X.1),]
taxPR2.f[is.na(taxPR2.f)] <- ""
hist(taxPR2.f$Subdivision,breaks=1000)
taxPR2.f$tax.Domain[taxPR2.f$Domain<70] <- ""
taxPR2.f$tax.Supergroup[taxPR2.f$Supergroup<40] <- ""
taxPR2.f$tax.Division[taxPR2.f$Division<40] <- ""
taxPR2.f$tax.Family[taxPR2.f$Family<40] <- ""
##Domain level taxonomy
Domain.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Abundance"),minAbun=0.01)
Domain.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Domain),euk[,1:88],output = "Count"),minAbun=0.01)
Domain.A.prop <- as.matrix(prop.table(as.matrix(Domain.A),margin = 2))
Domain.C.prop <- as.matrix(prop.table(as.matrix(Domain.C),margin = 2))
row.names(Domain.A.prop)[1] <- "Unknown"
row.names(Domain.C.prop)[1] <- "Unknown"
pdf("figures/tax.domain.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Domain.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Domain.A.prop)),fill=getPalette(dim(Domain.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Domain.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Domain.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Domain.C.prop)),fill=getPalette(dim(Domain.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Supergroup level taxonomy
Supergroup.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Abundance"),minAbun=0.01)
Supergroup.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Supergroup),euk[,1:88],output = "Count"),minAbun=0.01)
Supergroup.A.prop <- as.matrix(prop.table(as.matrix(Supergroup.A),margin = 2))
Supergroup.C.prop <- as.matrix(prop.table(as.matrix(Supergroup.C),margin = 2))
row.names(Supergroup.A.prop)[1] <- "Unknown"
row.names(Supergroup.C.prop)[1] <- "Unknown"
pdf("figures/tax.supergroup.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Supergroup.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Supergroup.A.prop)),fill=getPalette(dim(Supergroup.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Supergroup.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Supergroup.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Supergroup.C.prop)),fill=getPalette(dim(Supergroup.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Division level taxonomy
Division.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Abundance"),minAbun=0.01)
Division.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Division),euk[,1:88],output = "Count"),minAbun=0.01)
Division.A.prop <- as.matrix(prop.table(as.matrix(Division.A),margin = 2))
Division.C.prop <- as.matrix(prop.table(as.matrix(Division.C),margin = 2))
row.names(Division.A.prop)[1] <- "Unknown"
row.names(Division.C.prop)[1] <- "Unknown"
pdf("figures/tax.Division.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Division.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.A.prop)[1])),ylab="Read Abundance")
legend(105,0.8,rev(rownames(Division.A.prop)),fill=getPalette(dim(Division.A.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
barplot(Division.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Division.C.prop)[1])),ylab="ASV Counts")
legend(105,0.8,rev(rownames(Division.C.prop)),fill=getPalette(dim(Division.C.prop)[1]),cex=0.9,bty = "n",y.intersp=0.75)
dev.off()
##Family level taxonomy
Family.A <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Abundance"),minAbun=0.01)
Family.C <- minAbundance(CountTable(as.character(taxPR2.f$tax.Family),euk[,1:88],output = "Count"),minAbun=0.01)
Family.A.prop <- as.matrix(prop.table(as.matrix(Family.A),margin = 2))
Family.C.prop <- as.matrix(prop.table(as.matrix(Family.C),margin = 2))
row.names(Family.A.prop)[1] <- "Unknown"
row.names(Family.C.prop)[1] <- "Unknown"
pdf("figures/tax.Family.pdf",width = 12,height = 9)
par(mfrow=c(2,1),mar=c(5.1, 4.1, 1.1, 6.1),xpd=TRUE)
barplot(Family.A.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.A.prop)[1])),ylab="Read Abundance")
legend(108,1,rev(rownames(Family.A.prop)),fill=getPalette(dim(Family.A.prop)[1]),cex=0.5,bty = "n",y.intersp=0.75)
barplot(Family.C.prop,las=2,cex.names=0.6,col=rev(getPalette(dim(Family.C.prop)[1])),ylab="ASV Counts")
legend(108,1,rev(rownames(Family.C.prop)),fill=getPalette(dim(Family.C.prop)[1]),cex=0.4,bty = "n",y.intersp=0.75)
dev.off()
### Who da fungi!?
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"],]
taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Eurotiomycetes"]
test <- euk.Nreps[rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
test2 <- euk[rownames(euk) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"],]
taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"]
rownames(euk.Nreps) %in% taxPR2.f$X.1[taxPR2.f$tax.Family=="Cephaloidophoridae"]
#Alpha diversity
pdf("figures/rarefaction.big.pdf",width = 20,height = 13)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
pdf("figures/rarefaction.small.pdf",width = 9,height = 6.5)
rarecurve(t(euk[,1:88]),label=FALSE,step = 1000)
ordilabel(cbind(rowSums(t(euk[,1:88])), specnumber(t(euk[,1:88])))+5, labels=rownames(t(euk[,1:88])),cex=0.5, border = NA,fill=NULL,col="Darkred")
dev.off()
##ASV richness (blind)
euk.Nreps.high.binary.1rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.1rep[euk.Nreps.high.binary.1rep>0.5] <- 1
euk.Nreps.high.binary.3rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep<3] <- 0
euk.Nreps.high.binary.3rep[euk.Nreps.high.binary.3rep>2.5] <- 1
euk.Nreps.high.binary.8rep <- euk.Nreps[,1:11]
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep<8] <- 0
euk.Nreps.high.binary.8rep[euk.Nreps.high.binary.8rep>7.5] <- 1
pdf("figures/richness.sample.pdf",width = 8,height = 5)
par(mar=c(6.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(colSums(euk.Nreps.high.binary.1rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.1rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.3rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.3rep),las=2,cex.axis=1)
plot(colSums(euk.Nreps.high.binary.8rep),pch=16,cex=1.5,xaxt="n",ylab="ASV Richness",xlab="")
axis(1,at=1:11,labels = colnames(euk.Nreps.high.binary.8rep),las=2,cex.axis=1)
dev.off()
pdf("figures/richness.date.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(colnames(euk.Nreps.high.binary.1rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.1rep),
pch=16,cex=1.5,ylab="ASV Richness (1rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.3rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.3rep),
pch=16,cex=1.5,ylab="ASV Richness (3rep)",xlab="CalYrBP")
plot(dates$Median[match(colnames(euk.Nreps.high.binary.8rep),dates$sampleID)],
colSums(euk.Nreps.high.binary.8rep),
pch=16,cex=1.5,ylab="ASV Richness (8rep)",xlab="CalYrBP")
dev.off()
## Now let's look at the normalised data
richEst.css <- breakaway(euk.css)
richEst.css <- breakaway(euk[1:88,])
richEst.css <- breakaway(euk[,1:88])
str(euk[,1:88])
richEst.css <- breakaway(euk.css)
test <- round(euk.css,0)
View(test)
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),1,8))
rich.css
names(richEstimate.css)
substr(names(richEstimate.css),7,14)
substr(names(richEstimate.css),8,15)
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),8,15))
rich.css
richEst.rare <- breakaway(euk.rare)
View(euk.rare)
richEst.rare <- breakaway(euk.rare[,72])
View(richEst.rare)
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
richEst.rare <- breakaway(euk.rare[,72])
richEst.rare <- breakaway(euk.rare[,1:72])
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
rich.rare <- tapply(richEstimate.rare,FUN=mean,INDEX = substr(names(richEstimate.rare),8,15))
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),8,15))
richEst.rare <- breakaway(euk.rare[,1:72])
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
rich.rare <- tapply(richEstimate.rare,FUN=mean,INDEX = substr(names(richEstimate.rare),8,15))
names(rich.css)
dates$sampleID
names(rich.css)
gsub('\\.',"-",names(rich.css))
names(rich.rare) <- gsub('\\.',"-",names(rich.rare))
richEst.css <- breakaway(round(euk.css,0))
richEstimate.css <- unlist(lapply(richEst.css,FUN = function(x){x[["estimate"]]}))
rich.css <- tapply(richEstimate.css,FUN=mean,INDEX = substr(names(richEstimate.css),8,15))
names(rich.css) <- gsub('\\.',"-",names(rich.css))
richEst.rare <- breakaway(euk.rare[,1:72])
richEstimate.rare <- unlist(lapply(richEst.rare,FUN = function(x){x[["estimate"]]}))
rich.rare <- tapply(richEstimate.rare,FUN=mean,INDEX = substr(names(richEstimate.rare),8,15))
names(rich.rare) <- gsub('\\.',"-",names(rich.rare))
match(names(rich.css),dates$sampleID)
plot(dates$Median[match(names(rich.css),dates$sampleID)],
rich.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
#we use the euk dataset as it contains read data
richEst <- breakaway(euk[,1:88])
richEstimate <- unlist(lapply(richEst,FUN = function(x){x[["estimate"]]}))
richEstimateCIlwr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][1]}))
richEstimateCIupr <- unlist(lapply(richEst,FUN = function(x){x[["ci"]][2]}))
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(names(rich.css),dates$sampleID)],
rich.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
richEstimate.rare
names(richEstimate.css)
substr(names(richEstimate.css),7,14)
substr(names(richEstimate.css),8,15)
plot(dates$Median[match(substr(names(richEstimate.css),8,15),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
substr(names(richEstimate.css),8,15)richEstimate.css
richEstimate.css
match(substr(names(richEstimate.css),8,15),dates$sampleID)
substr(names(richEstimate.css),8,15)
gsub("\\.","-",substr(names(richEstimate.css),8,15))
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
dev.off()
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
for (i in c("Scaled","Nonscaled")){
print(i)
}
i <- "scaled"
if (i=="Scaled"){ylim=c(0,4200),}
for (i in c("Scaled","Nonscaled")){
pdf(paste0("figures/richness.rarefaction.",i".pdf"),width = 8,height = 5)
for (i in c("Scaled","Nonscaled")){
pdf(paste0("figures/richness.rarefaction.",i,".pdf"),width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
if (i="Scaled"){ylim=c(0,4200),}
for (i in c("Scaled","Nonscaled")){
pdf(paste0("figures/richness.rarefaction.",i,".pdf"),width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
if (i=="Scaled"){ylim=c(0,4200),}
pdf("figures/richness.rarefaction.scaled.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
ylim=c(0,4200),
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
dev.off()
pdf("figures/richness.rarefaction.unscaled.pdf",width = 8,height = 5)
par(mar=c(5.1,4.1,1.1,1.1),mfrow=c(1,3))
plot(dates$Median[match(as.factor(substr(names(richEstimate),1,8)),dates$sampleID)],
richEstimate,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness (breakaway on non-norm)")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.css),8,15)),dates$sampleID)],
richEstimate.css,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness CSS norm")
plot(dates$Median[match(gsub("\\.","-",substr(names(richEstimate.rare),8,15)),dates$sampleID)],
richEstimate.rare,pch=16,
xlab="CalYrBP",
ylab="EstimatedRichness rare norm")
dev.off()
